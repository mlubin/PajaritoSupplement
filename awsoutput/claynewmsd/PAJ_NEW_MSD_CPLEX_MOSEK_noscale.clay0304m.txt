WARNING: Method definition require(Symbol) in module Base at loading.jl:345 overwritten in module ConicBenchmarkUtilities at /home/ubuntu/.julia/v0.5/Requires/src/require.jl:12.
#SOLVERNAME# PAJ_NEW_MSD_CPLEX_MOSEK_noscale
#SOLVER# Pajarito.PajaritoSolver(2,3600.0,1.0e-5,true,CPLEX.CplexSolver(Any[(:CPX_PARAM_THREADS,1),(:CPX_PARAM_TILIM,3600.0),(:CPX_PARAM_EPINT,1.0e-8),(:CPX_PARAM_EPRHS,1.0e-6),(:CPX_PARAM_SCRIND,0),(:CPX_PARAM_EPGAP,1.0e-5)]),CPLEX.CplexSolver(Any[]),0,false,true,Mosek.MosekMathProgSolverInterface.MosekSolver(Any[(:LOG,0),(:NUM_THREADS,1),(:OPTIMIZER_MAX_TIME,120.0)]),true,false,false,true,false,true,false,true,true,true,true,false,true,true,false,false,false,false,true,true,false,true,true,1.0e-10,1.0e-6,0.01,0.0001)
#INSTANCE# clay0304m.cbf.gz
#TIMELIMIT# 3600.0

Transforming original data......Done     0.00s

Creating conic model data......Done     0.00s

Creating MIP model......Done     0.00s

Cone types summary:
Cone       | Count    | Min dim  | Max dim 
       SOC |       96 |        3 |        3

Solving conic relaxation......Done     0.01s
 - Relaxation status    =        Optimal
 - Relaxation objective =       0.000007

Creating conic subproblem model......Done

Starting MIP-solver-driven outer approximation algorithm
doing lazy cb
new int solution in lazy
conic status Optimal
violating dual cuts added in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing incumbent cb
checked feas: rejecting
doing lazy cb
new int solution in lazy
conic status Optimal
violating dual cuts added in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
violating dual cuts added in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing incumbent cb
checked feas: rejecting
adding new sol
doing incumbent cb
checked feas: accepting
doing lazy cb
new int solution in lazy
conic status Optimal
violating dual cuts added in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing incumbent cb
checked feas: rejecting
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing incumbent cb
checked feas: rejecting
adding new sol
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing incumbent cb
checked feas: rejecting
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing incumbent cb
checked feas: rejecting
doing lazy cb
new int solution in lazy
conic status Infeasible
violating dual cuts added in lazy
doing lazy cb
new int solution in lazy
conic status Infeasible
violating dual cuts added in lazy
doing lazy cb
new int solution in lazy
conic status Infeasible
violating dual cuts added in lazy
doing lazy cb
new int solution in lazy
conic status Infeasible
violating dual cuts added in lazy
doing lazy cb
new int solution in lazy
conic status Optimal
violating dual cuts added in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing incumbent cb
checked feas: rejecting
adding new sol
doing incumbent cb
checked feas: accepting
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing incumbent cb
checked feas: rejecting
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing incumbent cb
checked feas: rejecting
adding new sol
doing lazy cb
new int solution in lazy
conic status Infeasible
violating dual cuts added in lazy
doing lazy cb
new int solution in lazy
conic status Infeasible
violating dual cuts added in lazy
doing lazy cb
new int solution in lazy
conic status Optimal
violating dual cuts added in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing incumbent cb
checked feas: rejecting
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing incumbent cb
checked feas: rejecting
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing incumbent cb
checked feas: rejecting
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing incumbent cb
checked feas: rejecting
adding new sol
doing incumbent cb
checked feas: accepting
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
doing lazy cb
new int solution in lazy
conic status Optimal
violating dual cuts added in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing incumbent cb
checked feas: rejecting
adding new sol
doing incumbent cb
checked feas: accepting
doing lazy cb
new int solution in lazy
conic status Optimal
violating dual cuts added in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing incumbent cb
checked feas: rejecting
adding new sol
prim_inf = -1.7753869466396281
prim_inf = -0.8137482484467
prim_inf = -1.3905602405710145
prim_inf = -1.1227095352857983
prim_inf = -1.921124330728219e-6
prim_inf = -3.875397496244659e-7
prim_inf = -1.2498995294450004
prim_inf = -0.11875694770401424
prim_inf = -1.453514095899891
prim_inf = -1.3026806523371306
prim_inf = -0.2703074667663259
prim_inf = -0.07903117779096647
prim_inf = -0.4371145534362313
prim_inf = -0.15535526002986444
prim_inf = -0.5394115283602332
prim_inf = -0.1705812893815164
prim_inf = -4.944803535522624e-7
prim_inf = -5.985559496934911e-7
prim_inf = -0.5609262745358023
prim_inf = -0.12386213068248253
prim_inf = -0.8521931033084229
prim_inf = -0.28894091687857326
prim_inf = -1.107181741905265
prim_inf = -0.31748313505954684
prim_inf = -1.7569071024049663
prim_inf = -0.9451044538300266
prim_inf = -1.357604898333486
prim_inf = -0.8552434504851014
prim_inf = -1.0822254711378037
prim_inf = -0.8964518038809679
prim_inf = -1.8053410584362544
prim_inf = -1.1056440895253221
prim_inf = -1.4803464598919618
prim_inf = -1.1378032792745216
prim_inf = -0.2631986364744989
prim_inf = -0.06366005771178607
prim_inf = -0.4337745828304378
prim_inf = -0.13811796126356057
prim_inf = -0.5376645562193971
prim_inf = -0.15080490066065977
prim_inf = 1.0725196020189287e-7
prim_inf = 1.5020435206736238e-7
prim_inf = -0.5945159539744509
prim_inf = -0.10469202503691122
prim_inf = -0.8826526131223318
prim_inf = -0.2617545202654128
prim_inf = -1.1327479896618797
prim_inf = -0.2864573627127811
prim_inf = -1.6182894111857422
prim_inf = -0.8114828513521388
prim_inf = -0.03511862875437899
prim_inf = -0.16874295625869085
prim_inf = -0.8634003487465818
prim_inf = -0.056192259486465446
prim_inf = -1.6653956436130102e-8
prim_inf = 9.307221660037612e-10
prim_inf = -1.614814898171062
prim_inf = -1.291119579781025
prim_inf = -0.36707529799264194
prim_inf = -0.07438294051007688
prim_inf = -0.4982891151896638
prim_inf = -0.1561766859913405
prim_inf = -0.5851583858795948
prim_inf = -0.17056918781236163
prim_inf = -0.10167625791079349
prim_inf = -0.06698191694845157
prim_inf = -1.3704364063110006
prim_inf = -0.22372403733811552
prim_inf = -1.1623780075158265
prim_inf = -0.3581985915000132
prim_inf = -1.3183475862004457
prim_inf = -0.35977018412563666
prim_inf = -1.5927633450924077
prim_inf = -0.9627358202183132
prim_inf = -2.8602443080671947e-8
prim_inf = -6.019420162317601e-8
prim_inf = -1.7977692073541194
prim_inf = -0.9651434869168547
prim_inf = -0.7770619592190648
prim_inf = -0.9643746839467902
prim_inf = -1.6406623953182589
prim_inf = -1.1365565791293193
prim_inf = -0.3705022495507819
prim_inf = -0.06459632595760922
prim_inf = -0.4994072402664642
prim_inf = -0.14058208057940647
prim_inf = -0.5866076461365992
prim_inf = -0.1520365547066831
prim_inf = -0.10420091985268432
prim_inf = -0.056772026013204524
prim_inf = -1.3890119298254149
prim_inf = -0.18406384143349896
prim_inf = -1.1859790944546376
prim_inf = -0.32206160943019313
prim_inf = -1.3385305071788025
prim_inf = -0.3234360868227668

Pajarito MICP solve summary:
 - Total time (s)       =       3.72e+00
 - Status               =        Optimal
 - Best feasible obj.   =  +4.026239e+04
 - Final OA obj. bound  =  +4.026239e+04
 - Relative opt. gap    =      1.666e-08
 - Conic solve count    =             16
 - Feas. solution count =             10
 - Integer repeat count =             46

Timers (s):
 - Setup                =       1.59e-02
 -- Transform data      =       1.65e-04
 -- Create conic data   =       9.83e-05
 -- Create MIP data     =       4.92e-03
 -- Load/solve relax    =       6.57e-03
 - MIP-driven algorithm =       3.71e+00
 -- Solve conic model   =       5.84e-02

WARNING: For the MIP-solver-driven algorithm, optimality tolerance must be specified as MIP solver option, not Pajarito option
WARNING: For the MIP-solver-driven algorithm, optimality tolerance must be specified as MIP solver option, not Pajarito option
#STATUS# Optimal
#OBJVAL# 40262.38810370424
#OBJBOUND# 40262.387432964584
#TIMESOLVER# 3.723789930343628
#TIMEALL# 3.725553035736084
#SOLUTION# [13.005816923884469,15.505816576129545,13.005816582374337,2.4999998990906502,7.86627002912107e-7,2.5000004027135643,40.21923898843265,35.89904086214507,36.21923902860254,4.320198653502108,4.000000261664685,0.3201983807449712,40262.38810370424,29.854249584944856,16.84843274656266,14.34843312671968,16.84843316371031,49.99999905509108,9.780760151919774,14.100958321583251,13.780760177436083,-0.0,-0.0,-0.0,-0.0,-0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,-0.0,-0.0,-0.0,-0.0,1.0,1.0,0.0,1.0,1.0,0.0,-0.0,-0.0,-0.0,1359.9136318471521,3117.788857024561,0.0,9.646696073790896,12.42029335141,1.0,4.629245417436497,31.370740392586924,1.0,2.5442628742073623,29.706188882066343,1.0,1877.5547155122952,2091.5156006351262,0.0,1553.4024036321532,4774.604716838725,0.0,1766.4886625803445,4496.59289189758,-0.0,1597.3376547728194,4579.222892002201,-0.0,6.999997236685134,8.999997323326241,1.0,385.63207798426123,1516.7319775310252,-0.0,513.0144893492935,1383.2575143807312,0.0,449.1708589571699,1433.0425824071513,0.0,1256.591675262667,2595.9900611353914,9.171004165992924,13.346115800722213,10.62908067239173,12.708649532560905,8.298568477710349,12.185477290966356,1974.478336369414,2526.67468744654,1547.0412348639925,5461.973432942001,1762.7204273426087,4879.680897604461,1595.4288515937935,4959.958157693504,6.999994829756899,9.000004918432277,394.858395515087,1925.7905134292055,527.0031631416565,1609.4413397589203,462.4087024868423,1660.7275897971888,1578.8108427574577,3111.8457754912024,29.13456684788487,5.765569416303606,1.6983533353548375,32.305706169329575,8.113571564013245,27.886428038152157,1617.5496242796874,2057.4100865903097,1077.0432844631287,4763.077093928892,1553.5834537079843,4498.596506662886,1461.5490756258084,4579.1925952452875,5.890191012055538,9.345348317138546,296.6132273238557,1602.0488184643245,478.7607181132608,1441.6373198421147,433.90219791372004,1470.0051524910023,1479.8871021522536,2640.1173579719225,28.605733267901968,7.3942656040304255,8.017867436086936,13.556817506203373,13.657513082649894,10.528034824348,1733.8563600112113,2523.026695462148,1079.3097118277412,5464.616162507345,1554.7414367500542,4886.14864031701,1463.0481393120244,4963.264498899182,5.8992296902900785,9.291329723095,305.61944638481503,2010.0012950727535,492.63648279082804,1667.3120136115353,447.13150781911736,1697.3723541662891]
