WARNING: Method definition require(Symbol) in module Base at loading.jl:345 overwritten in module ConicBenchmarkUtilities at /home/ubuntu/.julia/v0.5/Requires/src/require.jl:12.
#SOLVERNAME# PAJ_NEW_MSD_CPLEX_MOSEK_eprhs6
#SOLVER# Pajarito.PajaritoSolver(2,3600.0,1.0e-5,true,CPLEX.CplexSolver(Any[(:CPX_PARAM_THREADS,1),(:CPX_PARAM_TILIM,3600.0),(:CPX_PARAM_EPINT,1.0e-8),(:CPX_PARAM_EPRHS,1.0e-6),(:CPX_PARAM_SCRIND,0),(:CPX_PARAM_EPGAP,1.0e-5)]),CPLEX.CplexSolver(Any[]),0,false,true,Mosek.MosekMathProgSolverInterface.MosekSolver(Any[(:LOG,0),(:NUM_THREADS,1),(:OPTIMIZER_MAX_TIME,120.0)]),true,false,false,true,false,true,false,true,true,true,true,false,true,true,false,true,false,false,true,true,false,true,true,1.0e-10,1.0e-6,0.01,0.0001)
#INSTANCE# clay0305m.cbf.gz
#TIMELIMIT# 3600.0

Transforming original data......Done     0.00s

Creating conic model data......Done     0.00s

Creating MIP model......Done     0.01s

Cone types summary:
Cone       | Count    | Min dim  | Max dim 
       SOC |      120 |        3 |        3

Solving conic relaxation......Done     0.01s
 - Relaxation status    =        Optimal
 - Relaxation objective =       0.001371

Creating conic subproblem model......Done

Starting MIP-solver-driven outer approximation algorithm
doing lazy cb
new int solution in lazy
conic status Infeasible
violating dual cuts added in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
new int solution in lazy
conic status Infeasible
violating dual cuts added in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
new int solution in lazy
conic status Infeasible
violating dual cuts added in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
new int solution in lazy
conic status Infeasible
viol cuts added on infeas solution in lazy
doing lazy cb
new int solution in lazy
conic status Infeasible
viol cuts added on infeas solution in lazy
doing lazy cb
new int solution in lazy
conic status Optimal
violating dual cuts added in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing incumbent cb
checked feas: rejecting
doing lazy cb
new int solution in lazy
conic status Optimal
violating dual cuts added in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing incumbent cb
checked feas: rejecting
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing incumbent cb
checked feas: rejecting
adding new sol
doing incumbent cb
checked feas: accepting
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing incumbent cb
checked feas: rejecting
adding new sol
doing incumbent cb
checked feas: accepting
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing incumbent cb
checked feas: rejecting
doing lazy cb
new int solution in lazy
conic status Optimal
violating dual cuts added in lazy
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
violating dual cuts added in lazy
adding new sol
prim_inf = -0.5027200068607272
prim_inf = -0.11866184493374021
prim_inf = -0.24640187130557933
prim_inf = -0.047729885743137856
prim_inf = -0.7274541637793845
prim_inf = -0.16408571964166185
prim_inf = -0.4172077507046197
prim_inf = -0.13085410014627996
prim_inf = -0.7287996909331014
prim_inf = -0.1947924417527247
prim_inf = -1.478977760231885
prim_inf = -1.0428444754746877
prim_inf = -0.09558183189513514
prim_inf = -0.020463137072283644
prim_inf = -0.6382382485049121
prim_inf = -1.3743931343529034
prim_inf = -1.5497898032919863
prim_inf = -1.4997979318000816
prim_inf = -0.967775237422785
prim_inf = -1.682808944658074
prim_inf = -0.7637684677012544
prim_inf = -0.2641820458306938
prim_inf = -0.5405305959379803
prim_inf = -0.11894234120245528
prim_inf = -1.2193649041502113
prim_inf = -0.4517662834264229
prim_inf = -0.6819152071009285
prim_inf = -0.3865953030108358
prim_inf = -1.0326158296318226
prim_inf = -0.4567950068826576
prim_inf = -0.5015251917050136
prim_inf = -0.13745510536227812
prim_inf = -0.25546007500042833
prim_inf = -0.05351929442349501
prim_inf = -0.7242835978602216
prim_inf = -0.17937293951672473
prim_inf = -0.42262993401550375
prim_inf = -0.14134470384942688
prim_inf = -0.7027654796222578
prim_inf = -0.2251984684371564
prim_inf = -1.551441130888751
prim_inf = -1.7322292139057147
prim_inf = -1.1460420479774491
prim_inf = -0.9921048907499923
prim_inf = -0.6878728049182783
prim_inf = -1.989278440927631
prim_inf = -1.5811909577951653
prim_inf = -1.9919600428503692
prim_inf = -0.04206412050777786
prim_inf = -0.009579131415719644
prim_inf = -1.146427801745972
prim_inf = -0.6672574365350101
prim_inf = -1.0568006100698994
prim_inf = -0.3912505623218294
prim_inf = -1.3551750347468214
prim_inf = -0.650132120541457
prim_inf = -0.8498354591245061
prim_inf = -0.5899563475998093
prim_inf = -1.3246885024192352
prim_inf = -1.0022293251570318
prim_inf = -0.40319495753942647
prim_inf = -0.12102830885305593
prim_inf = -0.18251673936015322
prim_inf = -0.05329237157002353
prim_inf = -0.6476426608580823
prim_inf = -0.1659310438844841
prim_inf = -0.38041488553812997
prim_inf = -0.1309235864191578
prim_inf = -0.5011702462061294
prim_inf = -0.1929681699766661
prim_inf = -1.502122570726371
prim_inf = -1.0504313554317548
prim_inf = -0.13314107578360357
prim_inf = -0.020567399174836964
prim_inf = -1.5219354194775967
prim_inf = -1.4996996170156152
prim_inf = -0.9415267140816468
prim_inf = -1.4318268098142362
prim_inf = -1.0183804812429997
prim_inf = -1.680844147606141
prim_inf = -0.5786084342861386
prim_inf = -0.2883828220074065
prim_inf = -0.36346711994860925
prim_inf = -0.1431265605167482
prim_inf = -1.0602543460271363
prim_inf = -0.47277383441610255
prim_inf = -0.6144135923293561
prim_inf = -0.3937351337783639
prim_inf = -0.6305661294966285
prim_inf = -0.4951269246053016
prim_inf = -0.41409706239232946
prim_inf = -0.1420541066054284
prim_inf = -0.1980356230437792
prim_inf = -0.06025846883039776
prim_inf = -0.649189501525143
prim_inf = -0.18204002560742083
prim_inf = -0.3879816832288725
prim_inf = -0.14171590876594564
prim_inf = -0.500698803895375
prim_inf = -0.23384209866526362
prim_inf = -1.572070029307742
prim_inf = -1.735467083440998
prim_inf = -1.1879741759719842
prim_inf = -0.9933521369966414
prim_inf = -1.5536947607738192
prim_inf = -1.9919559794116637
prim_inf = -0.9930392668447112
prim_inf = -1.9905173817518573
prim_inf = -0.06319758516686136
prim_inf = -0.01890960218972282
prim_inf = -0.9141799459497406
prim_inf = -0.6894210535410821
prim_inf = -0.7392571344286125
prim_inf = -0.417336944514318
prim_inf = -1.1989297892710056
prim_inf = -0.6698766337053712
prim_inf = -0.7726808639657747
prim_inf = -0.5968780250668715
prim_inf = -0.8972054674113679
prim_inf = -1.0305437309932586

Pajarito MICP solve summary:
 - Total time (s)       =       1.84e+01
 - Status               =        Optimal
 - Best feasible obj.   =  +8.092500e+03
 - Final OA obj. bound  =  +8.092500e+03
 - Relative opt. gap    =      1.150e-08
 - Conic solve count    =             11
 - Feas. solution count =              6
 - Integer repeat count =             35

Timers (s):
 - Setup                =       2.00e-02
 -- Transform data      =       2.41e-04
 -- Create conic data   =       1.42e-04
 -- Create MIP data     =       6.12e-03
 -- Load/solve relax    =       8.16e-03
 - MIP-driven algorithm =       1.84e+01
 -- Solve conic model   =       5.06e-02

WARNING: For the MIP-solver-driven algorithm, optimality tolerance must be specified as MIP solver option, not Pajarito option
WARNING: For the MIP-solver-driven algorithm, optimality tolerance must be specified as MIP solver option, not Pajarito option
#STATUS# Optimal
#OBJVAL# 8092.500093037197
#OBJBOUND# 8092.499999999999
#TIMESOLVER# 18.383864164352417
#TIMEALL# 18.385837078094482
#SOLUTION# [2.1873001106394088e-8,4.0000000126833815,3.500000014382127,6.877877732672638e-8,4.000000039961541,3.5000000159010707,1.7990655562271305e-7,7.500000026593523,4.000000042450866,3.5000001205069298,5.500000009428867,3.0665035836734236e-8,3.6437143072208765e-8,6.500000138348426,5.500000022181576,5.500000001025946,12.000000178688857,5.58998682882047e-8,6.500000216327031,6.500000151738551,8092.500093037197,49.95399396585916,49.95399397128292,45.95399396293722,53.45399396753395,49.95399389422129,81.19735393761675,86.69735394069426,81.19735395241757,81.19735395983929,74.69735386014244,0.0,0.0,1.0,-0.0,0.0,-0.0,0.0,1.0,-0.0,-0.0,0.0,1.0,0.0,-0.0,-0.0,-0.0,-0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,-0.0,-0.0,-0.0,0.0,-0.0,-0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,0.0,1.0,1.0,1407.1515111604783,5852.539722625096,-0.0,1128.4931741426942,6425.590517226383,-0.0,1363.831722773554,5757.3282587897265,0.0,1772.7743524687767,5654.9533340631915,-0.0,1459.5297847092336,5152.833492719756,-0.0,25.62190744545966,37.33420684003931,1.0,13.25304065184013,85.47599994558414,1.0,45.49322234659259,23.946910435875992,1.0,27.527227197658767,29.841015725348512,1.0,40.52588673173192,21.3308416794433,1.0,493.23762751647365,1347.57640512922,0.0,371.27347626423057,1633.6431614592636,0.0,535.8608967296349,1381.3054243568647,-0.0,765.3628254078217,1325.4862733942946,0.0,494.272427971499,1030.6692893619165,-0.0,1406.029116033152,4994.180920479982,1134.3565574410743,5656.6431504778575,1360.4414806138216,5336.406226420933,1778.870228776847,5227.205751205426,1430.2327643102017,4220.4336355657715,29.677820923976753,25.137117979827416,30.02214958100189,35.455603179917865,47.22686525025457,18.080704688930975,29.548744352615888,23.78083419920276,21.13119376701718,77.86428178321357,714.3778715112315,1193.4984467098404,574.6040846141287,1454.0690367093478,648.6610023611562,1307.0201066577547,877.1374700227736,1251.2248067854835,707.9683153125629,901.164607790012,1757.2121613142917,5859.9117905545545,1627.2970592339611,6443.95359197535,1557.9915969416338,5763.121758649676,1922.4326707632615,5655.16359942073,2077.3612513147573,5147.630684923963,24.94210120962326,37.632127702253925,12.84747668875838,85.48055379126993,27.879256764647504,29.835249668574583,37.9550580043392,26.326831027690133,40.928234953344614,21.203721578856218,709.7093643617078,1366.6401945723353,672.4442220321722,1654.931311157956,648.8798247115803,1400.3131791858068,863.4765012604621,1331.3807569211733,873.6656948795037,1056.9357024345036,1769.2959766479507,5006.545220544965,1641.318645961165,5676.299099442203,1559.7760875182023,5344.23634377367,1931.4594408623295,5228.250092675994,2076.707886085904,4241.092336274498,28.93123070978748,25.43581276978174,29.977472195590593,35.499542017865124,29.824889711232462,23.76932351049789,39.89837833483684,20.313683882761957,20.51697350900192,78.23564695183802,929.1226513395665,1213.6875178891983,873.0136041580516,1478.0456755239707,761.1867422095319,1326.4267191597444,974.8644584812027,1257.3991729069355,1084.9621720473544,927.4839759462452]
