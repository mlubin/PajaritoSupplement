WARNING: Method definition require(Symbol) in module Base at loading.jl:345 overwritten in module ConicBenchmarkUtilities at /home/ubuntu/.julia/v0.5/Requires/src/require.jl:12.
#SOLVERNAME# PAJ_NEW_MSD_CPLEX_MOSEK_eprhs7
#SOLVER# Pajarito.PajaritoSolver(2,3600.0,1.0e-5,true,CPLEX.CplexSolver(Any[(:CPX_PARAM_THREADS,1),(:CPX_PARAM_TILIM,3600.0),(:CPX_PARAM_EPINT,1.0e-8),(:CPX_PARAM_EPRHS,1.0e-7),(:CPX_PARAM_SCRIND,0),(:CPX_PARAM_EPGAP,1.0e-5)]),CPLEX.CplexSolver(Any[]),0,false,true,Mosek.MosekMathProgSolverInterface.MosekSolver(Any[(:LOG,0),(:NUM_THREADS,1),(:OPTIMIZER_MAX_TIME,120.0)]),true,false,false,true,false,true,false,true,true,true,true,false,true,true,false,true,false,false,true,true,false,true,true,1.0e-10,1.0e-6,0.01,0.0001)
#INSTANCE# clay0205m.cbf.gz
#TIMELIMIT# 3600.0

Transforming original data......Done     0.00s

Creating conic model data......Done     0.00s

Creating MIP model......Done     0.00s

Cone types summary:
Cone       | Count    | Min dim  | Max dim 
       SOC |       80 |        3 |        3

Solving conic relaxation......Done     0.01s
 - Relaxation status    =        Optimal
 - Relaxation objective =       0.000010

Creating conic subproblem model......Done

Starting MIP-solver-driven outer approximation algorithm
doing lazy cb
new int solution in lazy
conic status Infeasible
violating dual cuts added in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
new int solution in lazy
conic status Optimal
violating dual cuts added in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
violating dual cuts added in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
violating dual cuts added in lazy
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
prim_inf = 1.1479869499453343e-8
prim_inf = 5.49962351215072e-8
prim_inf = 2.3886741473688744e-9
prim_inf = 2.582164597697556e-7
prim_inf = 6.642403604928404e-8
prim_inf = 8.066035661613569e-8
prim_inf = 7.973994797794148e-9
prim_inf = 1.3756016414845362e-7
prim_inf = 4.958909585184301e-7
prim_inf = 4.994235496269539e-7
prim_inf = -0.3964879186666881
prim_inf = 4.175326751010289e-11
prim_inf = -0.8921989247092235
prim_inf = 4.431086608747137e-10
prim_inf = -1.1729459998959157
prim_inf = -1.9868213820524243
prim_inf = 4.244321276658525e-7
prim_inf = -0.6283100391684995
prim_inf = 2.5812974513428344e-7
prim_inf = 1.6890308529582398e-7
prim_inf = 1.1479869499453343e-8
prim_inf = 6.571372068719938e-8
prim_inf = 2.429032974760048e-9
prim_inf = 8.770302883931436e-8
prim_inf = 6.642403604928404e-8
prim_inf = 1.8366608856013045e-7
prim_inf = 7.973994797794148e-9
prim_inf = 1.8748869479168206e-7
prim_inf = 2.2562346657650778e-7
prim_inf = 5.499350663740188e-8
prim_inf = -1.0588888581920965
prim_inf = 1.1091927376583044e-10
prim_inf = 1.3316574332122855e-7
prim_inf = 1.842000045826353e-7
prim_inf = 5.844527315446157e-7
prim_inf = -1.1099044631178892
prim_inf = 4.24432116119533e-7
prim_inf = -0.04283062800715065
prim_inf = 2.5812860116047887e-7
prim_inf = 4.175237933168319e-11
prim_inf = 7.996277417987585e-9
prim_inf = 5.499077815329656e-8
prim_inf = 5.701804184354842e-8
prim_inf = 4.5884189603384584e-7
prim_inf = 4.655817065213341e-8
prim_inf = 5.270067049423233e-8
prim_inf = 1.5201976566459052e-8
prim_inf = 1.2069085641996935e-7
prim_inf = 5.400806912803091e-9
prim_inf = 4.99419002153445e-7
prim_inf = 4.244321027968567e-7
prim_inf = 4.175326751010289e-11
prim_inf = 1.6411238767943814e-7
prim_inf = 4.89333018549587e-10
prim_inf = -1.7735383878570445
prim_inf = -0.7070044040324636
prim_inf = 4.0210912999327775e-7
prim_inf = -0.6283144841802769
prim_inf = 1.7622076242673756e-7
prim_inf = 1.68900939456762e-7
prim_inf = 3.366237706359243e-7
prim_inf = 6.57064447295852e-8
prim_inf = 5.227593646850437e-8
prim_inf = 1.5759451343910769e-7
prim_inf = 4.655430529965088e-8
prim_inf = 1.4705346984555945e-7
prim_inf = 1.5201976566459052e-8
prim_inf = 1.6549074643990025e-7
prim_inf = 7.552500846941257e-7
prim_inf = 5.499077815329656e-8
prim_inf = 4.244321027968567e-7
prim_inf = 1.1091572105215164e-10
prim_inf = 1.6411238412672446e-7
prim_inf = 2.3503808677105553e-7
prim_inf = -1.78334428996871
prim_inf = -1.5400961920712888
prim_inf = 4.0210912644056407e-7
prim_inf = -1.190680252126615
prim_inf = -0.9421842682704025
prim_inf = -1.2601604624921574

Pajarito MICP solve summary:
 - Total time (s)       =       1.45e+01
 - Status               =        Optimal
 - Best feasible obj.   =  +8.092500e+03
 - Final OA obj. bound  =  +8.092500e+03
 - Relative opt. gap    =      0.000e+00
 - Conic solve count    =             11
 - Feas. solution count =             10
 - Integer repeat count =             77

Timers (s):
 - Setup                =       1.51e-02
 -- Transform data      =       1.94e-04
 -- Create conic data   =       1.17e-04
 -- Create MIP data     =       4.60e-03
 -- Load/solve relax    =       6.35e-03
 - MIP-driven algorithm =       1.45e+01
 -- Solve conic model   =       3.94e-02

WARNING: For the MIP-solver-driven algorithm, optimality tolerance must be specified as MIP solver option, not Pajarito option
WARNING: For the MIP-solver-driven algorithm, optimality tolerance must be specified as MIP solver option, not Pajarito option
#STATUS# Optimal
#OBJVAL# 8092.5
#OBJBOUND# 8092.5
#TIMESOLVER# 14.47644305229187
#TIMEALL# 14.4791259765625
#SOLUTION# [0.0,4.0,3.5,0.0,4.0,3.5,0.0,7.5,4.0,3.5,5.5,0.0,0.0,6.5,5.5,5.5,12.0,0.0,6.5,6.5,8092.5,49.94014193159957,49.94014193159957,45.94014193159957,53.44014193159957,49.94014193159957,78.74752300988365,73.24752300988365,78.74752300988365,78.74752300988365,85.24752300988365,0.0,0.0,1.0,0.0,-0.0,-0.0,0.0,1.0,-0.0,-0.0,0.0,1.0,0.0,0.0,0.0,-0.0,0.0,-0.0,-0.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,-0.0,1.0,1.0,1.0,0.0,0.0,0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,1052.362802496043,5147.706916473808,0.0,988.4825234973514,4322.736223704907,0.0,866.7219281339553,4934.714289964459,0.0,1401.7642222655077,4934.714149545849,0.0,926.6020108212065,6201.170831437555,0.0,8.371395139966921,3.0538366699881836,1.0,23.324917238965497,18.083560547240957,1.0,75.3385973760279,10.291447961031777,1.0,5.954291170538134,0.4034866355781761,1.0,20.792302791335697,76.51915226183185,1.0,1052.3628024960426,4322.736639870698,988.4825234774098,3690.26138996918,866.7219281339535,4522.228935581613,1401.7642222655077,4522.2289269365665,926.6021361715266,5147.706916481513,14.455266872907544,18.08356055041066,12.672588556795432,85.60832247600587,30.91201241522583,17.578135175848615,5.954291170538177,7.763340657343397,20.792302791348163,3.0538366699881845,1401.7642222498607,5147.706916489238,1477.6444695668365,4322.735789980113,1052.3627840209977,4934.7143589668885,1555.5247837536695,4934.714191177163,1555.5247913814978,6201.170831451132,5.9542911705382195,3.0538366699881836,11.834575456393196,18.0835605467999,58.75859363557629,0.44827072344497765,19.714856207932314,0.40348914756739074,19.714858547554684,76.51915226191522,1401.7639917564911,4322.73663988643,1477.64447307288,3690.2612609754524,1052.3627840230033,4522.229018387214,1555.5247837536704,4522.2289766884205,1555.5242078023402,5147.706916487545,5.9542911705382195,18.083560550410652,11.834575456393225,85.60832027450533,61.38279263664754,33.7166314924242,19.71485620793237,19.317556162499955,37.7457511912732,8.885482964546043]
