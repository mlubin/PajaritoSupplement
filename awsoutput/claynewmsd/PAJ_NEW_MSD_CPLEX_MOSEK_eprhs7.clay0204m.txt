WARNING: Method definition require(Symbol) in module Base at loading.jl:345 overwritten in module ConicBenchmarkUtilities at /home/ubuntu/.julia/v0.5/Requires/src/require.jl:12.
#SOLVERNAME# PAJ_NEW_MSD_CPLEX_MOSEK_eprhs7
#SOLVER# Pajarito.PajaritoSolver(2,3600.0,1.0e-5,true,CPLEX.CplexSolver(Any[(:CPX_PARAM_THREADS,1),(:CPX_PARAM_TILIM,3600.0),(:CPX_PARAM_EPINT,1.0e-8),(:CPX_PARAM_EPRHS,1.0e-7),(:CPX_PARAM_SCRIND,0),(:CPX_PARAM_EPGAP,1.0e-5)]),CPLEX.CplexSolver(Any[]),0,false,true,Mosek.MosekMathProgSolverInterface.MosekSolver(Any[(:LOG,0),(:NUM_THREADS,1),(:OPTIMIZER_MAX_TIME,120.0)]),true,false,false,true,false,true,false,true,true,true,true,false,true,true,false,true,false,false,true,true,false,true,true,1.0e-10,1.0e-6,0.01,0.0001)
#INSTANCE# clay0204m.cbf.gz
#TIMELIMIT# 3600.0

Transforming original data......Done     0.00s

Creating conic model data......Done     0.00s

Creating MIP model......Done     0.00s

Cone types summary:
Cone       | Count    | Min dim  | Max dim 
       SOC |       64 |        3 |        3

Solving conic relaxation......Done     0.01s
 - Relaxation status    =        Optimal
 - Relaxation objective =       0.000004

Creating conic subproblem model......Done

Starting MIP-solver-driven outer approximation algorithm
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Infeasible
viol cuts added on infeas solution in lazy
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
prim_inf = 5.690935722668655e-9
prim_inf = 7.363905751844868e-8
prim_inf = 5.8288378568249755e-9
prim_inf = 9.36815922614187e-8
prim_inf = 2.3768393475620542e-7
prim_inf = 1.5626756066922098e-7
prim_inf = 8.210054147639312e-8
prim_inf = 1.13963324110955e-7
prim_inf = 9.117459072172096e-7
prim_inf = -0.15654909323209054
prim_inf = 4.698134290492817e-7
prim_inf = -0.6918821421196455
prim_inf = 7.780665001178022e-12
prim_inf = 5.823748230326942e-7
prim_inf = 5.347646236941728e-7
prim_inf = -0.43932903336326934
prim_inf = 5.690935722668655e-9
prim_inf = 9.987707016989589e-8
prim_inf = 7.039193405944388e-8
prim_inf = 1.459566192352213e-7
prim_inf = 2.374777068325784e-7
prim_inf = 2.5890585675369948e-8
prim_inf = 8.209542556869565e-8
prim_inf = 1.4729175745742396e-7
prim_inf = 9.117459001117822e-7
prim_inf = 3.4244735935828885e-7
prim_inf = 4.6981342194385434e-7
prim_inf = 2.0868536410034721e-7
prim_inf = 7.772449350795796e-12
prim_inf = 2.6484147319649765e-7
prim_inf = 5.347918161646703e-7
prim_inf = -0.7057458460646524
prim_inf = 6.490608939202502e-9
prim_inf = 7.300877769012004e-8
prim_inf = 2.642336767166853e-7
prim_inf = 2.991055225720629e-8
prim_inf = 1.8613968677527737e-7
prim_inf = 2.5410008674953133e-7
prim_inf = 6.367281457642093e-8
prim_inf = 4.719549906440079e-8
prim_inf = -1.723095880352596
prim_inf = 1.332189363267844e-7
prim_inf = 8.432563949334337e-7
prim_inf = -0.69162544743957
prim_inf = 4.62130161693608e-7
prim_inf = 5.824999589343349e-7
prim_inf = -1.4727391551046907
prim_inf = 5.824999456116586e-7
prim_inf = 3.645982360467315e-8
prim_inf = 9.960876923287287e-8
prim_inf = 3.299396666989196e-8
prim_inf = 3.8636289900750853e-7
prim_inf = 1.8611945051816292e-7
prim_inf = 3.644636308308691e-7
prim_inf = 2.9804334644722985e-7
prim_inf = 1.3781846064375713e-7
prim_inf = -0.8401666653308058
prim_inf = 3.4244735935828885e-7
prim_inf = 5.409006575973763e-12
prim_inf = 2.086855488414585e-7
prim_inf = 4.6229187944391015e-7
prim_inf = 2.64843913910795e-7
prim_inf = -1.5617226938103812
prim_inf = 2.648438481855919e-7

Pajarito MICP solve summary:
 - Total time (s)       =       3.35e+00
 - Status               =        Optimal
 - Best feasible obj.   =  +6.545000e+03
 - Final OA obj. bound  =  +6.545000e+03
 - Relative opt. gap    =      0.000e+00
 - Conic solve count    =              9
 - Feas. solution count =              8
 - Integer repeat count =             66

Timers (s):
 - Setup                =       1.20e-02
 -- Transform data      =       1.49e-04
 -- Create conic data   =       8.62e-05
 -- Create MIP data     =       3.36e-03
 -- Load/solve relax    =       5.26e-03
 - MIP-driven algorithm =       3.34e+00
 -- Solve conic model   =       2.28e-02

WARNING: For the MIP-solver-driven algorithm, optimality tolerance must be specified as MIP solver option, not Pajarito option
WARNING: For the MIP-solver-driven algorithm, optimality tolerance must be specified as MIP solver option, not Pajarito option
#STATUS# Optimal
#OBJVAL# 6545.0
#OBJBOUND# 6545.0
#TIMESOLVER# 3.3519699573516846
#TIMEALL# 3.353070020675659
#SOLUTION# [0.0,4.0,3.5,4.0,3.5,7.5,5.5,0.0,0.0,5.5,5.5,0.0,6545.0,47.91305310151499,47.91305310151499,51.91305310151499,44.41305310151499,79.70933153478369,74.20933153478369,79.70933153478369,79.70933153478369,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0,1.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,924.9537963207899,5286.646697545292,0.0,865.1276902282549,4450.134705324499,0.0,1254.0841808139858,5070.768501354351,0.0,807.3015533685252,5070.768608633339,0.0,21.04007180204843,8.042118160160669,1.0,31.213968079213828,16.901787140641602,1.0,0.17061286466659853,1.462482043978409,1.0,43.387857574933264,2.0938363213560542,1.0,924.9537963208047,4450.134691534476,865.1276622683699,3808.041320492809,1254.0841809435005,4652.512848181375,807.3015533705534,4652.51256571018,21.040071802048487,10.828496922650288,31.21396807921394,68.73517632377707,0.1706128646666032,3.20649299529323,43.3878575743297,5.307840295662174,1254.0843258975992,5286.646699210956,1325.9102608665544,4450.134847250661,1475.5625111563759,5070.768253261613,924.9537694765036,5070.768777948089,2.0938363213560542,7.340476809818597,1.9967178042002285,16.898410642684496,11.64892855103534,1.4624820438243367,80.54537513228493,1.462482043824353,1254.0843070906026,4450.13469213174,1325.9104142837996,3808.040862633962,1475.5625111713753,4652.512060405377,924.953660968416,4652.512587753674,0.7142857142857146,10.828496922650288,1.9967190676930273,68.73517632377047,11.648928550012556,3.2064929952880963,96.79350700471177,3.206492995288235]
