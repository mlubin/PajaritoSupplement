WARNING: Method definition require(Symbol) in module Base at loading.jl:345 overwritten in module ConicBenchmarkUtilities at /home/ubuntu/.julia/v0.5/Requires/src/require.jl:12.
#SOLVERNAME# PAJ_NEW_MSD_CPLEX_MOSEK_eprhs7
#SOLVER# Pajarito.PajaritoSolver(2,3600.0,1.0e-5,true,CPLEX.CplexSolver(Any[(:CPX_PARAM_THREADS,1),(:CPX_PARAM_TILIM,3600.0),(:CPX_PARAM_EPINT,1.0e-8),(:CPX_PARAM_EPRHS,1.0e-7),(:CPX_PARAM_SCRIND,0),(:CPX_PARAM_EPGAP,1.0e-5)]),CPLEX.CplexSolver(Any[]),0,false,true,Mosek.MosekMathProgSolverInterface.MosekSolver(Any[(:LOG,0),(:NUM_THREADS,1),(:OPTIMIZER_MAX_TIME,120.0)]),true,false,false,true,false,true,false,true,true,true,true,false,true,true,false,true,false,false,true,true,false,true,true,1.0e-10,1.0e-6,0.01,0.0001)
#INSTANCE# clay0305m.cbf.gz
#TIMELIMIT# 3600.0

Transforming original data......Done     0.00s

Creating conic model data......Done     0.00s

Creating MIP model......Done     0.01s

Cone types summary:
Cone       | Count    | Min dim  | Max dim 
       SOC |      120 |        3 |        3

Solving conic relaxation......Done     0.01s
 - Relaxation status    =        Optimal
 - Relaxation objective =       0.001371

Creating conic subproblem model......Done

Starting MIP-solver-driven outer approximation algorithm
doing lazy cb
new int solution in lazy
conic status Infeasible
violating dual cuts added in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
new int solution in lazy
conic status Infeasible
violating dual cuts added in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
new int solution in lazy
conic status Optimal
violating dual cuts added in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Infeasible
violating dual cuts added in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
new int solution in lazy
conic status Optimal
violating dual cuts added in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
doing lazy cb
new int solution in lazy
conic status Optimal
violating dual cuts added in lazy
doing lazy cb
new int solution in lazy
conic status Optimal
violating dual cuts added in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
violating dual cuts added in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
violating dual cuts added in lazy
adding new sol
prim_inf = 4.690991772804409e-8
prim_inf = 4.5096385292708874e-8
prim_inf = 7.945209290483035e-8
prim_inf = 1.5114255802473053e-7
prim_inf = 2.5618192012188956e-8
prim_inf = 4.377125151222572e-8
prim_inf = 9.560994840285275e-8
prim_inf = 4.8405127017758787e-8
prim_inf = 1.4571378414984792e-7
prim_inf = 3.488275979179889e-8
prim_inf = -1.2578794192057572
prim_inf = -1.7865720352714618
prim_inf = -0.11015104636458695
prim_inf = 3.5401931697265354e-7
prim_inf = 2.2751566852718952e-8
prim_inf = -0.7309414148099795
prim_inf = 3.768771961176753e-9
prim_inf = 3.512241766312485e-7
prim_inf = 5.064897834472504e-9
prim_inf = 2.477521121591053e-7
prim_inf = 9.172970294457627e-8
prim_inf = 3.556126557668904e-7
prim_inf = 1.1591100701480173e-7
prim_inf = 7.992264272616012e-7
prim_inf = 1.9582586219257792e-7
prim_inf = 4.99594193570374e-7
prim_inf = 1.4338661458168644e-7
prim_inf = 4.633363914763322e-7
prim_inf = 1.4908471257513156e-7
prim_inf = 2.4404948817391414e-7
prim_inf = 4.690969035436865e-8
prim_inf = 5.1234565034974366e-8
prim_inf = 7.945118341012858e-8
prim_inf = 1.1046995496144518e-7
prim_inf = 2.56184193858644e-8
prim_inf = 4.7503817768301815e-8
prim_inf = -0.10274519257859538
prim_inf = 4.9569280236028135e-8
prim_inf = 1.4571378414984792e-7
prim_inf = 4.389403329696506e-8
prim_inf = 3.888837163401604e-8
prim_inf = -1.5374986395123642
prim_inf = 1.1081935369361418e-8
prim_inf = 8.340013835095306e-8
prim_inf = 2.2751566852718952e-8
prim_inf = 6.005010710907754e-8
prim_inf = -0.6133527143285917
prim_inf = 6.005010710907754e-8
prim_inf = -0.6753181862857716
prim_inf = 7.583131456101455e-8
prim_inf = 9.172634918286349e-8
prim_inf = 4.0160102798836306e-7
prim_inf = 1.1591095017138286e-7
prim_inf = 6.30547845048568e-7
prim_inf = 1.9582262211770285e-7
prim_inf = 6.947395831957692e-7
prim_inf = -0.4648231990677232
prim_inf = 3.2638604352541734e-7
prim_inf = 1.4908471257513156e-7
prim_inf = 4.120257699469221e-7
prim_inf = 2.56184193858644e-8
prim_inf = 4.5261913328431547e-8
prim_inf = 2.3801908355380874e-7
prim_inf = 1.5875775716267526e-7
prim_inf = 1.8651462596608326e-8
prim_inf = 4.377216100692749e-8
prim_inf = -0.27488293556757526
prim_inf = 4.848698154091835e-8
prim_inf = 4.271896614227444e-9
prim_inf = 3.488275979179889e-8
prim_inf = 2.2751566852718952e-8
prim_inf = -1.7649769644049655
prim_inf = 7.044349104035064e-9
prim_inf = 2.6616245207833344e-7
prim_inf = 1.9348362911841832e-9
prim_inf = 3.4641482682395974e-7
prim_inf = -0.3279456326899268
prim_inf = 3.512241359970858e-7
prim_inf = 3.6806504510877858e-9
prim_inf = 2.4792498720671574e-7
prim_inf = 2.1494923885256867e-7
prim_inf = 3.5874484183295863e-7
prim_inf = 2.8398403628671076e-8
prim_inf = 7.992264272616012e-7
prim_inf = 1.2713985597656574e-7
prim_inf = 4.99594193570374e-7
prim_inf = -0.19290241507127348
prim_inf = 4.682942744693719e-7
prim_inf = 2.403567123110406e-8
prim_inf = 2.440497155475896e-7
prim_inf = -0.2261212078005883
prim_inf = 5.176298145670444e-8
prim_inf = 2.2904919205757324e-7
prim_inf = 1.3009866961510852e-7
prim_inf = 1.8651462596608326e-8
prim_inf = 4.750927473651245e-8
prim_inf = 8.794540917733684e-8
prim_inf = 4.976300260750577e-8
prim_inf = 4.266212272341363e-9
prim_inf = 4.389312380226329e-8
prim_inf = 2.275156862907579e-8
prim_inf = 2.7462058937999245e-7
prim_inf = 7.044349104035064e-9
prim_inf = 5.692349702712818e-8
prim_inf = 1.934843396611541e-9
prim_inf = 6.005010710907754e-8
prim_inf = -0.32794633464628653
prim_inf = 6.005010710907754e-8
prim_inf = 4.762870986496637e-9
prim_inf = -1.9230002719655346
prim_inf = 2.1494940938282525e-7
prim_inf = 6.390951057255734e-8
prim_inf = -0.11228436823807897
prim_inf = 6.305479018919868e-7
prim_inf = 1.2713996966340346e-7
prim_inf = 6.947395831957692e-7
prim_inf = -0.42898631074291416
prim_inf = 3.263852477175533e-7
prim_inf = 2.403567123110406e-8
prim_inf = 4.120257699469221e-7

Pajarito MICP solve summary:
 - Total time (s)       =       1.66e+01
 - Status               =        Optimal
 - Best feasible obj.   =  +8.092500e+03
 - Final OA obj. bound  =  +8.092500e+03
 - Relative opt. gap    =      0.000e+00
 - Conic solve count    =             11
 - Feas. solution count =              8
 - Integer repeat count =             33

Timers (s):
 - Setup                =       1.98e-02
 -- Transform data      =       2.33e-04
 -- Create conic data   =       1.41e-04
 -- Create MIP data     =       6.09e-03
 -- Load/solve relax    =       8.15e-03
 - MIP-driven algorithm =       1.66e+01
 -- Solve conic model   =       5.33e-02

WARNING: For the MIP-solver-driven algorithm, optimality tolerance must be specified as MIP solver option, not Pajarito option
WARNING: For the MIP-solver-driven algorithm, optimality tolerance must be specified as MIP solver option, not Pajarito option
#STATUS# Optimal
#OBJVAL# 8092.500000000001
#OBJBOUND# 8092.500000000001
#TIMESOLVER# 16.594558000564575
#TIMEALL# 16.59647488594055
#SOLUTION# [0.0,4.000000000000003,3.5,0.0,4.0,3.5,0.0,7.5,4.0,3.5,5.5,0.0,0.0,6.500000000000002,5.5,5.5,12.0,0.0,6.5,6.5,8092.500000000001,49.73847428099459,49.73847428099459,53.73847428099459,46.23847428099459,49.73847428099459,78.76672908194175,73.26672908194175,78.76672908194175,78.76672908194175,85.26672908194175,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,0.0,1.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1039.3191995657553,5150.463286965049,0.0,975.8422365982962,4325.26232719619,0.0,1386.7039490010632,4937.413107794707,0.0,914.3652830833475,4937.413096351745,0.0,914.3652601517215,6204.197502041567,0.0,21.180921406611564,30.142795592904122,1.0,15.028839122142177,17.92057931655245,1.0,5.010767038297051,0.47759225007251715,1.0,22.67212712814256,0.07114421504758406,1.0,22.672127112801547,76.8555291517273,1.0,297.164981861214,1009.1248969588587,0.0,263.6880316343987,663.9240618697258,0.0,494.54968982574627,916.07466023709,0.0,232.21108169286205,916.0746768626291,0.0,232.21108102843232,1502.8591002046105,0.0,1039.3191995658253,4325.262543310117,975.8422365987437,3692.5951593023,1386.7039490010002,4524.81273388689,963.9338445401675,4524.812729213366,914.3652601517183,5150.463290062127,7.626024129002346,78.26293289051718,14.149075650798647,85.25328824949247,5.010767038297051,7.470769657167693,33.007316825763645,7.470769657167693,34.567957928725946,3.1213314927157363,297.1649818617183,663.9241940650709,263.68803163439827,431.2569004834286,494.54968982654333,743.4742562201304,302.7527444648029,743.4743933349741,232.21108102843186,1009.124868466718,1386.7039490010009,5150.463286537679,1462.1807412059743,4325.262310724622,1619.1347973534162,4937.413107791689,1205.0634669467804,4937.413096149417,1539.6578606096114,6204.197502041321,5.010767038297051,27.444409453702974,10.487715628201677,17.92058014770373,27.441612765126855,0.07114421762333811,9.285714843186796,0.07114421504760582,17.964664195751425,76.85552914499772,494.54968508745105,1009.1248953769255,540.0266792263128,663.9240618697381,636.9805434760324,916.0746602370823,328.9829463419202,916.0746745892343,587.5036283978961,1502.8591002045787,1563.5839954550434,4325.262542167885,1462.180747768114,3692.59512305147,1619.134797353348,4524.812733875913,1039.319178220715,4524.812728774091,1539.6578606138073,5150.463290062748,5.010767038297047,17.920580067687297,10.48771562820167,85.25328939134101,27.441612765126706,7.470769657167693,9.285719023626285,7.470769657167693,17.964664185489482,82.03533581451052,494.54968508740376,663.9243063346771,572.2044867993401,431.2569004834172,636.980543476031,743.4742562201313,378.5243673068079,743.4743933352606,587.5036283978973,1009.1248684667253]
