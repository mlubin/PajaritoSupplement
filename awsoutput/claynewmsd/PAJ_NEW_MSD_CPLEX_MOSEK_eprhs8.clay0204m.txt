WARNING: Method definition require(Symbol) in module Base at loading.jl:345 overwritten in module ConicBenchmarkUtilities at /home/ubuntu/.julia/v0.5/Requires/src/require.jl:12.
#SOLVERNAME# PAJ_NEW_MSD_CPLEX_MOSEK_eprhs8
#SOLVER# Pajarito.PajaritoSolver(2,3600.0,1.0e-5,true,CPLEX.CplexSolver(Any[(:CPX_PARAM_THREADS,1),(:CPX_PARAM_TILIM,3600.0),(:CPX_PARAM_EPINT,1.0e-8),(:CPX_PARAM_EPRHS,1.0e-8),(:CPX_PARAM_SCRIND,0),(:CPX_PARAM_EPGAP,1.0e-5)]),CPLEX.CplexSolver(Any[]),0,false,true,Mosek.MosekMathProgSolverInterface.MosekSolver(Any[(:LOG,0),(:NUM_THREADS,1),(:OPTIMIZER_MAX_TIME,120.0)]),true,false,false,true,false,true,false,true,true,true,true,false,true,true,false,true,false,false,true,true,false,true,true,1.0e-10,1.0e-6,0.01,0.0001)
#INSTANCE# clay0204m.cbf.gz
#TIMELIMIT# 3600.0

Transforming original data......Done     0.00s

Creating conic model data......Done     0.00s

Creating MIP model......Done     0.00s

Cone types summary:
Cone       | Count    | Min dim  | Max dim 
       SOC |       64 |        3 |        3

Solving conic relaxation......Done     0.01s
 - Relaxation status    =        Optimal
 - Relaxation objective =       0.000004

Creating conic subproblem model......Done

Starting MIP-solver-driven outer approximation algorithm
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Infeasible
viol cuts added on infeas solution in lazy
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
prim_inf = 3.119163238807232e-7
prim_inf = 4.266512405592948e-7
prim_inf = 5.268816494208295e-9
prim_inf = 1.201788109028712e-7
prim_inf = 2.596218564576702e-7
prim_inf = 7.100816219463013e-7
prim_inf = 8.43067482492188e-9
prim_inf = -0.6156219354525092
prim_inf = -1.0946448622666054
prim_inf = 5.910100693284903e-7
prim_inf = -0.4129775489463796
prim_inf = 6.673392238809583e-7
prim_inf = -0.4530466091691072
prim_inf = -0.9306303002348884
prim_inf = 1.480027123079708e-8
prim_inf = -0.7208844720831875
prim_inf = 1.785394942999119e-8
prim_inf = 5.082929419586435e-7
prim_inf = 1.840209051806596e-7
prim_inf = 5.879242053197231e-7
prim_inf = 2.5962208383134566e-7
prim_inf = 7.712687875027768e-7
prim_inf = 7.679659574932884e-9
prim_inf = 1.8238552002003416e-7
prim_inf = 2.578038120759629e-7
prim_inf = 6.673392229927799e-7
prim_inf = 7.430903679050971e-7
prim_inf = 8.395946338168869e-8
prim_inf = 1.1173367164829529e-7
prim_inf = 2.681445057106657e-7
prim_inf = 2.2915237707366032e-8
prim_inf = -0.5547423014383601
prim_inf = 1.692483238002751e-7
prim_inf = 4.266312316758558e-7
prim_inf = 8.395500117330812e-8
prim_inf = 2.8670001483988017e-8
prim_inf = 1.8493051356927026e-7
prim_inf = 8.491024345858023e-7
prim_inf = 6.32792307442287e-9
prim_inf = 6.902473614900373e-7
prim_inf = -0.4530466091691072
prim_inf = 5.910100693284903e-7
prim_inf = -1.3448867952159802
prim_inf = 6.673392238809583e-7
prim_inf = 6.689759857181343e-12
prim_inf = -0.4632594759655042
prim_inf = -1.065560559935605
prim_inf = -0.8296374865003253
prim_inf = 2.4773112272669096e-7
prim_inf = 5.082329153083265e-7
prim_inf = 7.258176992763765e-8
prim_inf = 3.0366663850145414e-7
prim_inf = 1.8493028619559482e-7
prim_inf = 7.797889338689856e-7
prim_inf = 5.865899765922222e-9
prim_inf = 7.55030669097323e-7
prim_inf = 1.1173367608918738e-7
prim_inf = -1.6871361734092716
prim_inf = -1.490391605557366
prim_inf = 8.395946338168869e-8
prim_inf = 1.8198775819655566e-12
prim_inf = 2.681445279151262e-7
prim_inf = 2.3383241654073572e-7
prim_inf = 2.681445057106657e-7

Pajarito MICP solve summary:
 - Total time (s)       =       2.17e+00
 - Status               =        Optimal
 - Best feasible obj.   =  +6.545000e+03
 - Final OA obj. bound  =  +6.545000e+03
 - Relative opt. gap    =      0.000e+00
 - Conic solve count    =              7
 - Feas. solution count =              6
 - Integer repeat count =             56

Timers (s):
 - Setup                =       1.23e-02
 -- Transform data      =       1.39e-04
 -- Create conic data   =       8.79e-05
 -- Create MIP data     =       3.70e-03
 -- Load/solve relax    =       5.11e-03
 - MIP-driven algorithm =       2.16e+00
 -- Solve conic model   =       1.83e-02

WARNING: For the MIP-solver-driven algorithm, optimality tolerance must be specified as MIP solver option, not Pajarito option
WARNING: For the MIP-solver-driven algorithm, optimality tolerance must be specified as MIP solver option, not Pajarito option
#STATUS# Optimal
#OBJVAL# 6545.0
#OBJBOUND# 6545.0
#TIMESOLVER# 2.1679389476776123
#TIMEALL# 2.1693811416625977
#SOLUTION# [0.0,4.0,3.5,4.0,3.5,7.5,5.5,0.0,0.0,5.5,5.5,0.0,6545.0,47.05932327236684,47.05932327236684,51.05932327236684,43.55932327236684,80.49948203917913,74.99948203917913,80.49948203917913,80.49948203917913,0.0,1.0,0.0,0.0,-0.0,0.0,0.0,0.0,1.0,-0.0,0.0,1.0,-0.0,0.0,0.0,1.0,1.0,0.0,1.0,0.0,0.0,-0.0,-0.0,0.0,873.7534558953528,5402.172707393814,0.0,815.6349436242358,4556.179801719078,0.0,1194.3466698748227,5183.923573049664,0.0,759.5162960250003,7489.483703975,0.0,65.93815531184494,12.246370628168002,1.0,52.48340102903552,6.252587652419554,1.0,0.47759225007251715,7.942483104059047,1.0,55.36366974804299,6.611524859533802,1.0,873.7535845113639,4556.178917368023,815.6348706366061,3906.184106601067,1194.346669874828,4760.9266853131885,759.5162963105786,4760.928087421902,29.60095931008707,6.252587652419557,41.48230092578103,56.25776727693073,0.19419591156152083,1.0010359216417442,55.36366951934829,1.6626413221514649,1194.3467238887465,5402.172707445838,1264.4654184677133,4556.18001023002,1410.702634144763,5183.923212645452,873.7535895525737,5183.923624469084,0.47759225007251715,12.246370628168002,1.6275226746751912,6.252587652419554,6.5501356124532535,5.434757217830717,63.888332251466636,7.2467676118876625,1194.3466769816323,4556.178917504382,1264.4654256637964,3906.184661924894,1410.7026341448254,4760.926665026723,873.753589754685,4760.926723973961,0.19419591156151816,40.81360962536476,1.9729719792418274,56.257767276930736,6.550135612471635,1.001035921641722,29.600959676860896,1.0010359216417442]
