WARNING: Method definition require(Symbol) in module Base at loading.jl:345 overwritten in module ConicBenchmarkUtilities at /home/ubuntu/.julia/v0.5/Requires/src/require.jl:12.
#SOLVERNAME# PAJ_NEW_MSD_CPLEX_MOSEK_eprhs8
#SOLVER# Pajarito.PajaritoSolver(2,3600.0,1.0e-5,true,CPLEX.CplexSolver(Any[(:CPX_PARAM_THREADS,1),(:CPX_PARAM_TILIM,3600.0),(:CPX_PARAM_EPINT,1.0e-8),(:CPX_PARAM_EPRHS,1.0e-8),(:CPX_PARAM_SCRIND,0),(:CPX_PARAM_EPGAP,1.0e-5)]),CPLEX.CplexSolver(Any[]),0,false,true,Mosek.MosekMathProgSolverInterface.MosekSolver(Any[(:LOG,0),(:NUM_THREADS,1),(:OPTIMIZER_MAX_TIME,120.0)]),true,false,false,true,false,true,false,true,true,true,true,false,true,true,false,true,false,false,true,true,false,true,true,1.0e-10,1.0e-6,0.01,0.0001)
#INSTANCE# clay0305m.cbf.gz
#TIMELIMIT# 3600.0

Transforming original data......Done     0.00s

Creating conic model data......Done     0.00s

Creating MIP model......Done     0.01s

Cone types summary:
Cone       | Count    | Min dim  | Max dim 
       SOC |      120 |        3 |        3

Solving conic relaxation......Done     0.01s
 - Relaxation status    =        Optimal
 - Relaxation objective =       0.001371

Creating conic subproblem model......Done

Starting MIP-solver-driven outer approximation algorithm
doing lazy cb
new int solution in lazy
conic status Infeasible
violating dual cuts added in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
new int solution in lazy
conic status Infeasible
violating dual cuts added in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
new int solution in lazy
conic status Optimal
violating dual cuts added in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
violating dual cuts added in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
violating dual cuts added in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
doing lazy cb
new int solution in lazy
conic status Optimal
violating dual cuts added in lazy
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
violating dual cuts added in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
violating dual cuts added in lazy
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
violating dual cuts added in lazy
adding new sol
prim_inf = 1.7608840607863385e-7
prim_inf = 2.282395143993199e-7
prim_inf = 2.66061306319898e-8
prim_inf = 2.7919486456084996e-7
prim_inf = 5.998788310535019e-8
prim_inf = 2.5166445993818343e-7
prim_inf = -0.04506060289031666
prim_inf = 2.3828579287510365e-7
prim_inf = 5.541096470551565e-8
prim_inf = 5.263318598736078e-7
prim_inf = 3.947397964054744e-9
prim_inf = -0.8587468759094374
prim_inf = 5.162974368033701e-7
prim_inf = 2.581762252873432e-7
prim_inf = 5.21744922821199e-7
prim_inf = -1.7315977608886364
prim_inf = 4.002218112475475e-9
prim_inf = -1.7315977608886364
prim_inf = 4.476507058370771e-7
prim_inf = 1.070787902790471e-10
prim_inf = 1.541898768664396e-7
prim_inf = 2.1884602574573364e-8
prim_inf = 1.9532734540916863e-7
prim_inf = 7.804260349075776e-9
prim_inf = 3.1758901286593755e-7
prim_inf = 7.973551419127034e-8
prim_inf = 7.242886113090208e-8
prim_inf = 1.073044586519245e-7
prim_inf = 2.8654622497015225e-7
prim_inf = 6.034742909832858e-7
prim_inf = 1.7623551684664562e-7
prim_inf = 2.750084604485892e-7
prim_inf = 2.66061306319898e-8
prim_inf = 3.622258191171568e-7
prim_inf = 6.734512680850457e-8
prim_inf = 2.8179874789202586e-7
prim_inf = 1.0705207387218252e-8
prim_inf = 2.618789949337952e-7
prim_inf = 5.541096470551565e-8
prim_inf = 6.291720637818798e-7
prim_inf = 3.947397964054744e-9
prim_inf = -0.5861153268273043
prim_inf = 7.060614493070716e-7
prim_inf = 8.3645090853679e-11
prim_inf = 3.0429566777456785e-7
prim_inf = -1.0928944631816169
prim_inf = -0.5568013586684533
prim_inf = -1.5856670851811785
prim_inf = 4.4765064899365825e-7
prim_inf = -1.2083550969870167
prim_inf = 1.5300122413464123e-7
prim_inf = 9.04765329323709e-9
prim_inf = 1.9523957917044754e-7
prim_inf = 2.130807956746139e-7
prim_inf = -0.06789860435611672
prim_inf = 6.569728157046484e-7
prim_inf = 7.242891797432094e-8
prim_inf = 7.259866379172308e-7
prim_inf = 2.865461965484428e-7
prim_inf = 4.304888534534257e-8
prim_inf = 1.0708163244999014e-8
prim_inf = 2.282158675370738e-7
prim_inf = 4.851497124036541e-7
prim_inf = 2.781716830213554e-7
prim_inf = 2.4382188712479547e-8
prim_inf = 2.5166355044348165e-7
prim_inf = 1.5749037629575469e-7
prim_inf = 2.3827487893868238e-7
prim_inf = 3.32497620547656e-8
prim_inf = 5.263364073471166e-7
prim_inf = 4.002244757828066e-9
prim_inf = 6.0329554685267794e-9
prim_inf = 7.33070296021765e-7
prim_inf = 2.1900063984503504e-9
prim_inf = 3.947382865021609e-9
prim_inf = -1.7315977608886364
prim_inf = -0.2625842773138807
prim_inf = -1.7315977608886364
prim_inf = 5.365517665723019e-7
prim_inf = 1.0685141660360387e-10
prim_inf = 7.101834853528999e-8
prim_inf = 2.1884602574573364e-8
prim_inf = 6.200821189850103e-8
prim_inf = 7.805397217452992e-9
prim_inf = 1.7235163340956206e-7
prim_inf = 7.973562787810806e-8
prim_inf = 5.5723489822412375e-8
prim_inf = 1.0730491339927539e-7
prim_inf = -0.7868887938283251
prim_inf = 6.034267698851181e-7
prim_inf = 1.0708163244999014e-8
prim_inf = 2.747583494056016e-7
prim_inf = 4.851472112932242e-7
prim_inf = 3.5188622860005125e-7
prim_inf = 2.438241608615499e-8
prim_inf = 2.817914719344117e-7
prim_inf = 1.5749037629575469e-7
prim_inf = 2.618071448523551e-7
prim_inf = 3.323657438158989e-8
prim_inf = 6.291929821600206e-7
prim_inf = -0.5511667365809299
prim_inf = -1.480164437247609
prim_inf = 7.33070296021765e-7
prim_inf = 1.2435918961273273e-10
prim_inf = 3.947397964054744e-9
prim_inf = -1.0173968233099622
prim_inf = -0.262588848741526
prim_inf = -1.5860655649814817
prim_inf = 5.365150670399998e-7
prim_inf = -1.2083550969870167
prim_inf = 7.101834853528999e-8
prim_inf = 9.07300545804901e-9
prim_inf = -0.0037585040535077496
prim_inf = 2.1308642317308113e-7
prim_inf = -0.16616478180498007
prim_inf = 6.569728157046484e-7
prim_inf = 5.5723376135574654e-8
prim_inf = 7.259866379172308e-7
prim_inf = 1.1085330697824247e-7
prim_inf = 4.304888534534257e-8

Pajarito MICP solve summary:
 - Total time (s)       =       1.51e+01
 - Status               =        Optimal
 - Best feasible obj.   =  +8.092500e+03
 - Final OA obj. bound  =  +8.092500e+03
 - Relative opt. gap    =      0.000e+00
 - Conic solve count    =             10
 - Feas. solution count =              8
 - Integer repeat count =             30

Timers (s):
 - Setup                =       2.07e-02
 -- Transform data      =       2.23e-04
 -- Create conic data   =       1.36e-04
 -- Create MIP data     =       6.66e-03
 -- Load/solve relax    =       8.39e-03
 - MIP-driven algorithm =       1.50e+01
 -- Solve conic model   =       4.72e-02

WARNING: For the MIP-solver-driven algorithm, optimality tolerance must be specified as MIP solver option, not Pajarito option
WARNING: For the MIP-solver-driven algorithm, optimality tolerance must be specified as MIP solver option, not Pajarito option
#STATUS# Optimal
#OBJVAL# 8092.5
#OBJBOUND# 8092.5
#TIMESOLVER# 15.059326887130737
#TIMEALL# 15.061754941940308
#SOLUTION# [0.0,4.0,3.5,0.0,4.0,3.5,0.0,7.5,4.0,3.5,5.5,0.0,0.0,6.500000000000002,5.5,5.500000000000001,12.0,-0.0,6.5,6.5,8092.5,49.95451559494273,49.95451559494273,45.95451559494273,53.45451559494273,49.95451559494273,78.90596058851402,73.40596058851402,78.90596058851402,78.90596058851402,85.40596058851402,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,0.0,1.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1053.2954896777464,5170.466577990112,0.0,989.3865381372916,4343.595034601262,0.0,867.5684628809472,4956.998662515184,0.0,1435.1982094307702,4956.99869568094,0.0,927.4774943986909,6226.148977623671,0.0,6.479490841627516,6.795508501748757,1.0,12.570456163308393,16.761156410046283,1.0,30.752389003409462,2.0938363213560542,1.0,6.024646791759963,2.0938363213560542,1.0,20.66142362824303,79.31613399986486,1.0,304.6600910892507,1017.9903099257249,0.0,270.75105692400643,671.1187913909412,0.0,208.93298774823506,924.522402411767,0.0,504.2052523077971,924.5223896539428,0.0,238.84201791141732,1513.6733122816695,0.0,1053.2954896002138,4343.595043694749,989.3865381372916,3709.5353631834623,867.5684596858237,4543.562882533405,1402.8407309375884,4543.562927798058,927.4774943986804,5170.465541285881,6.479490841627516,24.00242946838432,12.570454875716685,82.70155281415964,30.752392455675647,15.382737376934244,8.627420188191985,33.27415582076398,20.661423628243654,9.78174125450056,304.6600912709132,671.1187909730902,270.75105693592945,437.0591414575056,216.30936999749053,751.0864287290337,504.20525230779344,751.0864027768555,238.84201791141754,1017.9902991425961,1402.840730935482,5170.466578051067,1478.7494106917056,4343.595036824006,1053.2955696493484,4956.998662518735,1556.6586781734136,4956.998695707951,1556.65877493568,6226.148977608551,6.024646791759871,3.632685750994316,11.933673255056533,16.761158683351937,6.479490841627573,2.0938363213560542,22.972928629559988,2.0938363213560542,19.84270359399318,79.31613399987395,504.20525266409754,1017.9903099257085,550.1142847066114,671.1187913905751,304.66008831359545,924.5224024117329,598.0233162934805,924.5223896536988,986.3266876821854,1513.6733123178146,1402.8407309354834,4343.595044238155,1478.7494106936424,3709.5353823664245,1053.2955696492302,4543.56288255112,1556.6586781734568,4543.56292796159,1556.6587749458727,5170.465541231582,8.592132909125297,65.22646946790951,11.933673255056533,82.7015528124557,6.479490841627516,14.205052398642351,22.9729910155491,33.305623661969285,19.84270359437562,9.78174125450056,504.2052526640955,671.1187909645914,551.1519308970219,437.05914145627276,332.348611628547,751.0864287290342,598.0233162934803,751.0864027768326,598.0232997814471,1017.9902991425934]
