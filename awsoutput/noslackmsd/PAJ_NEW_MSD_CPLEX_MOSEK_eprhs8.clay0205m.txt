WARNING: Method definition require(Symbol) in module Base at loading.jl:345 overwritten in module ConicBenchmarkUtilities at /home/ubuntu/.julia/v0.5/Requires/src/require.jl:12.
#SOLVERNAME# PAJ_NEW_MSD_CPLEX_MOSEK_eprhs8
#SOLVER# Pajarito.PajaritoSolver(2,3600.0,1.0e-5,true,CPLEX.CplexSolver(Any[(:CPX_PARAM_THREADS,1),(:CPX_PARAM_TILIM,3600.0),(:CPX_PARAM_EPINT,1.0e-8),(:CPX_PARAM_EPRHS,1.0e-8),(:CPX_PARAM_SCRIND,0),(:CPX_PARAM_EPGAP,1.0e-5)]),CPLEX.CplexSolver(Any[]),0,false,true,Mosek.MosekMathProgSolverInterface.MosekSolver(Any[(:LOG,0),(:NUM_THREADS,1),(:OPTIMIZER_MAX_TIME,120.0)]),true,false,false,true,false,true,false,true,true,true,true,false,true,true,false,true,false,false,true,true,false,true,true,1.0e-10,1.0e-6,0.01,0.0001)
#INSTANCE# clay0205m.cbf.gz
#TIMELIMIT# 3600.0

Transforming original data......Done     0.00s

Creating conic model data......Done     0.00s

Creating MIP model......Done     0.00s

Cone types summary:
Cone       | Count    | Min dim  | Max dim 
       SOC |       80 |        3 |        3

Solving conic relaxation......Done     0.01s
 - Relaxation status    =        Optimal
 - Relaxation objective =       0.000010

Creating conic subproblem model......Done

Starting MIP-solver-driven outer approximation algorithm
doing lazy cb
new int solution in lazy
conic status Infeasible
violating dual cuts added in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
new int solution in lazy
conic status Infeasible
violating dual cuts added in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
new int solution in lazy
conic status Infeasible
violating dual cuts added in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
new int solution in lazy
conic status Optimal
violating dual cuts added in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
adding new sol
doing incumbent cb
checked feas: accepting
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
violating dual cuts added in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
violating dual cuts added in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
violating dual cuts added in lazy
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
violating dual cuts added in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
prim_inf = 3.865443432005122e-8
prim_inf = 6.887939889566042e-7
prim_inf = 6.528352969326079e-9
prim_inf = 6.037098501110449e-7
prim_inf = -0.06042554336534067
prim_inf = 8.708757377462462e-7
prim_inf = -0.01926743113926932
prim_inf = 3.0182491173036397e-8
prim_inf = -0.06252696189289964
prim_inf = 9.369068720843643e-8
prim_inf = 1.9624721314670523e-7
prim_inf = 2.469572280006105e-8
prim_inf = 1.1508009656324703e-7
prim_inf = -0.07778189171378358
prim_inf = 5.306677763883272e-8
prim_inf = 5.419982773702259e-8
prim_inf = 3.622301782968407e-7
prim_inf = 5.420550230894605e-8
prim_inf = 7.565940052245423e-8
prim_inf = 1.2397573279088192e-7
prim_inf = 1.084335963241756e-7
prim_inf = 6.498867151094601e-7
prim_inf = -0.11132245188991874
prim_inf = 6.874242899357341e-7
prim_inf = 6.540868753290852e-7
prim_inf = 9.554560165270232e-7
prim_inf = 4.841965619561961e-7
prim_inf = 1.6527246771147475e-7
prim_inf = -0.11526209298131107
prim_inf = 2.2346284822560847e-9
prim_inf = 1.962472291339168e-7
prim_inf = -0.767526343395077
prim_inf = 1.1540936029064142e-7
prim_inf = 2.4695584244227575e-8
prim_inf = 5.306531392079705e-8
prim_inf = -1.6012963690928568
prim_inf = 3.622301782968407e-7
prim_inf = -1.9340829944003817
prim_inf = 7.565972026668533e-8
prim_inf = 2.987590903558157e-7
prim_inf = 1.0777489478641655e-7
prim_inf = 8.269944373751059e-7
prim_inf = 8.037900443014223e-7
prim_inf = 7.681592251174152e-9
prim_inf = 5.335696187103167e-7
prim_inf = 7.816070137778297e-7
prim_inf = 4.595995051204227e-7
prim_inf = 3.018340066773817e-8
prim_inf = 8.878873813955579e-8
prim_inf = 8.942697604652494e-7
prim_inf = -0.3887715750059151
prim_inf = 2.469572280006105e-8
prim_inf = 1.5897118998964288e-7
prim_inf = -0.11567829112750871
prim_inf = 1.9588184674290687e-7
prim_inf = 5.42055316188339e-8
prim_inf = -1.4098747400007596
prim_inf = -0.3897231888346475
prim_inf = 1.1013491274525222e-7
prim_inf = -1.5870536622053208
prim_inf = -0.0461464085458374
prim_inf = 8.816041372483596e-7
prim_inf = -0.02615225948193256
prim_inf = 1.1365045793354511e-8
prim_inf = 5.335689365892904e-7
prim_inf = 9.55568793870043e-7
prim_inf = 4.5960041461512446e-7
prim_inf = 1.0033909347839653e-7
prim_inf = 8.804909157333896e-8
prim_inf = 7.986636774148792e-8
prim_inf = 3.6223018184955436e-7
prim_inf = -1.5825837074062186
prim_inf = 1.8345136609809742e-7
prim_inf = 2.4695584244227575e-8
prim_inf = -1.1243609719813428
prim_inf = -1.7587514866138818
prim_inf = -1.4098740883732575
prim_inf = -1.880747158287856
prim_inf = 1.1013490919253854e-7
prim_inf = 2.9875938878376473e-7
size(m.b_orig) = (596,)
size(m.A_orig) = (596,161)
size(m.final_soln) = (161,)
Constraint cones violations:
viol_lin = 0.0
viol_soc = 0.009268905967473984
viol_rot = 0.0
Variable cones violations:
viol_lin = 0.0
viol_soc = 0.0
viol_rot = 0.0

Pajarito MICP solve summary:
 - Total time (s)       =       2.44e+01
 - Status               =        Optimal
 - Best feasible obj.   =  +8.092500e+03
 - Final OA obj. bound  =  +8.092500e+03
 - Relative opt. gap    =      0.000e+00
 - Conic solve count    =             17
 - Feas. solution count =             14
 - Integer repeat count =             73

Timers (s):
 - Setup                =       4.06e-02
 -- Transform data      =       1.91e-04
 -- Create conic data   =       1.07e-04
 -- Create MIP data     =       1.83e-03
 -- Load/solve relax    =       5.90e-03
 - MIP-driven algorithm =       2.43e+01
 -- Solve conic model   =       5.60e-02

WARNING: For the MIP-solver-driven algorithm, optimality tolerance must be specified as MIP solver option, not Pajarito option
WARNING: For the MIP-solver-driven algorithm, optimality tolerance must be specified as MIP solver option, not Pajarito option
#STATUS# Optimal
#OBJVAL# 8092.5
#OBJBOUND# 8092.5
#TIMESOLVER# 24.361314058303833
#TIMEALL# 24.362770080566406
#SOLUTION# [0.0,4.000000000000003,3.5,0.0,4.0,3.4999999999999987,0.0,7.5,4.0,3.5,5.5,0.0,0.0,6.500000000000002,5.5,5.5,12.0,0.0,6.5,6.5,8092.500000000001,49.87393736060011,49.87393736060011,45.87393736060011,53.37393736060011,49.87393736060011,81.13436086938465,86.63436086938465,81.13436086938465,81.13436086938465,74.63436086938465,0.0,0.0,1.0,0.0,-0.0,-0.0,0.0,1.0,0.0,-0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,-0.0,0.0,1.0,0.0,0.0,0.0,-0.0,-0.0,-0.0,0.0,0.0,-0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,-0.0,1.0,1.0,1048.0717999524866,5495.901568396538,0.0,984.3239422905987,6262.245179614355,0.0,889.7389765811614,5275.748081207909,0.0,1410.4082062371704,5275.750299270633,0.0,952.3811054039201,4642.2909135638465,0.0,6.896204211247877,17.092939574889897,1.0,13.148329450756137,86.85167054924386,1.0,31.652579956067598,6.939856974975612,1.0,5.635577390249789,6.939856974953081,1.0,21.40045469624897,3.4806090879397953,1.0,1048.071763350722,4642.289622273127,1042.3976390737298,5495.901572159921,862.8279135551966,4848.9418967342,1396.8108554264877,4848.943812905792,979.0543046423959,3737.4100747314587,6.896204211247813,6.031931547598049,13.148329448426864,17.092939574891147,31.652579956091586,1.471281524568782,5.635577390249789,5.023414283585439,21.40045469624539,78.59954530375444,1396.8111185096068,5495.901188557996,1472.5584763394718,6262.247046150193,1048.071540351676,5275.748316732786,1550.306586786512,5275.750299270144,1550.3068744070943,4642.289054902807,7.189767081218281,17.092939574889897,11.383452328947158,88.61654767105284,6.896204212690378,6.939856974952967,65.54313133064477,8.814320239074448,19.131326925872486,17.650968329536642,1429.8243642974203,4642.289084308594,1492.0826398831298,5495.903430276577,1048.0715403520246,4848.941896460394,1550.3065867858363,4848.943970367758,1550.3068749808822,3737.409929621658,5.6355773902497805,17.468213322460542,11.383452177372618,17.092939574891147,16.313431321980072,1.987709817251468,65.54305940934853,3.1825335464486644,19.131326925872543,78.59954530374239]
