WARNING: Method definition require(Symbol) in module Base at loading.jl:345 overwritten in module ConicBenchmarkUtilities at /home/ubuntu/.julia/v0.5/Requires/src/require.jl:12.
#SOLVERNAME# PAJ_NEW_MSD_CPLEX_MOSEK_eprhs7
#SOLVER# Pajarito.PajaritoSolver(2,3600.0,1.0e-5,true,CPLEX.CplexSolver(Any[(:CPX_PARAM_THREADS,1),(:CPX_PARAM_TILIM,3600.0),(:CPX_PARAM_EPINT,1.0e-8),(:CPX_PARAM_EPRHS,1.0e-7),(:CPX_PARAM_SCRIND,0),(:CPX_PARAM_EPGAP,1.0e-5)]),CPLEX.CplexSolver(Any[]),0,false,true,Mosek.MosekMathProgSolverInterface.MosekSolver(Any[(:LOG,0),(:NUM_THREADS,1),(:OPTIMIZER_MAX_TIME,120.0)]),true,false,false,true,false,true,false,true,true,true,true,false,true,true,false,true,false,false,true,true,false,true,true,1.0e-10,1.0e-6,0.01,0.0001)
#INSTANCE# clay0204m.cbf.gz
#TIMELIMIT# 3600.0

Transforming original data......Done     0.00s

Creating conic model data......Done     0.00s

Creating MIP model......Done     0.00s

Cone types summary:
Cone       | Count    | Min dim  | Max dim 
       SOC |       64 |        3 |        3

Solving conic relaxation......Done     0.01s
 - Relaxation status    =        Optimal
 - Relaxation objective =       0.000004

Creating conic subproblem model......Done

Starting MIP-solver-driven outer approximation algorithm
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Infeasible
viol cuts added on infeas solution in lazy
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Infeasible
viol cuts added on infeas solution in lazy
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Infeasible
violating dual cuts added in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
prim_inf = 4.5079025312588783e-7
prim_inf = 4.5383967517409474e-7
prim_inf = 2.418119038338773e-10
prim_inf = 6.761165423085913e-7
prim_inf = 1.8859168449125718e-7
prim_inf = 1.5120349416974932e-8
prim_inf = 1.1259089660597965e-8
prim_inf = 4.4810803956352174e-9
prim_inf = 8.077884317003736e-8
prim_inf = 3.5648465512849725e-8
prim_inf = 6.259883988946058e-7
prim_inf = -0.6303496535958111
prim_inf = 1.3299938927957555e-10
prim_inf = -1.4529044826299184
prim_inf = -1.801581824630579
prim_inf = 1.0707667463805137e-7
prim_inf = 4.508075335252215e-7
prim_inf = 5.45956936548464e-7
prim_inf = 2.412434696452692e-10
prim_inf = 7.379226190096233e-7
prim_inf = 2.408120280961157e-7
prim_inf = 2.5232111511286348e-8
prim_inf = 5.19994500791654e-8
prim_inf = 4.718212949228473e-7
prim_inf = 4.54939090843709e-8
prim_inf = -1.1319300851562737
prim_inf = 7.467906470992602e-8
prim_inf = 4.671036890613323e-10
prim_inf = 4.331468517193571e-11
prim_inf = -1.7650170500262812
prim_inf = -0.9543034828378774
prim_inf = -1.7613911141474627
prim_inf = 2.398128344793804e-7
prim_inf = 4.538405846687965e-7
prim_inf = 2.665210558916442e-7
prim_inf = 1.516036718385294e-8
prim_inf = 2.0277332168916473e-7
prim_inf = 1.2538748705992475e-7
prim_inf = 9.246446097677108e-8
prim_inf = 1.0804797057062387e-8
prim_inf = -0.27212582871939106
prim_inf = 8.899331049860848e-8
prim_inf = -0.4251682472091498
prim_inf = -0.9819908583689507
prim_inf = 3.1808927047904945e-8
prim_inf = 1.0333067734791257e-11
prim_inf = -0.6463112384391847
prim_inf = 1.0699557506654855e-7
prim_inf = -1.1915990933216563
prim_inf = 5.459578460431658e-7
prim_inf = 2.4998212211357895e-7
prim_inf = 6.635555109824054e-7
prim_inf = 1.0433961961098248e-7
prim_inf = 1.7899765225593e-8
prim_inf = 4.361527317087166e-8
prim_inf = 4.718240234069526e-7
prim_inf = -1.1587995318401545
prim_inf = -1.684356966822179
prim_inf = -1.050559404695968
prim_inf = 4.671036890613323e-10
prim_inf = 6.473754865510273e-11
prim_inf = -1.7646322070995346
prim_inf = -0.31103969896076356
prim_inf = -0.7461904624363833
size(m.b_orig) = (439,)
size(m.A_orig) = (439,117)
size(m.final_soln) = (117,)
Constraint cones violations:
viol_lin = 0.0
viol_soc = 0.006171688437461853
viol_rot = 0.0
Variable cones violations:
viol_lin = 0.0
viol_soc = 0.0
viol_rot = 0.0

Pajarito MICP solve summary:
 - Total time (s)       =       1.64e+00
 - Status               =        Optimal
 - Best feasible obj.   =  +6.545000e+03
 - Final OA obj. bound  =  +6.545000e+03
 - Relative opt. gap    =      0.000e+00
 - Conic solve count    =              9
 - Feas. solution count =              6
 - Integer repeat count =             47

Timers (s):
 - Setup                =       3.91e-02
 -- Transform data      =       1.57e-04
 -- Create conic data   =       1.18e-04
 -- Create MIP data     =       1.81e-03
 -- Load/solve relax    =       5.41e-03
 - MIP-driven algorithm =       1.60e+00
 -- Solve conic model   =       2.17e-02

WARNING: For the MIP-solver-driven algorithm, optimality tolerance must be specified as MIP solver option, not Pajarito option
WARNING: For the MIP-solver-driven algorithm, optimality tolerance must be specified as MIP solver option, not Pajarito option
#STATUS# Optimal
#OBJVAL# 6545.0
#OBJBOUND# 6545.0
#TIMESOLVER# 1.6416120529174805
#TIMEALL# 1.643064022064209
#SOLUTION# [-0.0,4.0,3.4999999999999987,4.0,3.5,7.5,5.5,0.0,0.0,5.5,5.5,0.0,6545.0,46.95680587359913,46.95680587359913,42.95680587359913,50.45680587359913,80.55051515718007,75.05051515718007,80.55051515718007,80.55051515718007,0.0,-0.0,1.0,-0.0,-0.0,1.0,0.0,1.0,0.0,-0.0,-0.0,-0.0,0.0,0.0,0.0,1.0,1.0,0.0,1.0,0.0,0.0,-0.0,0.0,0.0,867.7032164734584,5409.677052095477,0.0,809.7898004296632,4563.070555078199,0.0,699.9625109354814,5191.276695160593,0.0,1187.271464321496,5191.276722783221,0.0,30.72699984152995,12.60615763884612,1.0,42.81337566243427,9.076499950332684,1.0,72.98616587645024,16.097122540486907,1.0,3.8749121933627837,4.2046121311789335,1.0,867.7032164659201,4563.070852105597,809.7898004299183,3912.565502474633,699.962492633211,4767.9735833072355,1187.2714401161352,4767.97251842056,30.727000401272466,14.389681065001776,42.81338773979549,55.49482441020945,72.98616587976824,8.555588353533544,1.0414834650382476,8.437174130985113,1187.271328529576,5409.67705209531,1257.18491509164,4563.072063402892,867.7033241999825,5191.276408892412,1329.0986330118637,5191.276706365349,0.47759225007251715,12.606157275936937,0.47759225007251715,12.278661668785105,30.72700061836416,4.204612409798328,3.4587114628034783,4.20461213138998,2937.9291478951473,4563.070852104853,1257.1849254962865,3912.565647995123,867.7033669548521,4767.973600790532,1329.098665499035,4767.972518414071,1.2809206759163776,38.85965623223524,0.9648471848987867,55.49482441020949,30.727001121938144,8.542849905861658,2.6686438726407364,1.8111469284426447]
