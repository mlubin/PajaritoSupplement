WARNING: Method definition require(Symbol) in module Base at loading.jl:345 overwritten in module ConicBenchmarkUtilities at /home/ubuntu/.julia/v0.5/Requires/src/require.jl:12.
#SOLVERNAME# PAJ_NEW_MSD_CPLEX_MOSEK_noprimsocdisagg
#SOLVER# Pajarito.PajaritoSolver(2,3600.0,1.0e-5,true,CPLEX.CplexSolver(Any[(:CPX_PARAM_THREADS,1),(:CPX_PARAM_TILIM,3600.0),(:CPX_PARAM_EPINT,1.0e-8),(:CPX_PARAM_EPRHS,1.0e-6),(:CPX_PARAM_SCRIND,0),(:CPX_PARAM_EPGAP,1.0e-5)]),CPLEX.CplexSolver(Any[]),0,false,true,Mosek.MosekMathProgSolverInterface.MosekSolver(Any[(:LOG,0),(:NUM_THREADS,1),(:OPTIMIZER_MAX_TIME,120.0)]),true,false,false,true,false,true,false,true,true,true,true,false,true,true,false,true,false,false,true,true,false,false,true,1.0e-10,1.0e-6,0.01,0.0001)
#INSTANCE# clay0204h.cbf.gz
#TIMELIMIT# 3600.0

Transforming original data......Done     0.00s

Creating conic model data......Done     0.00s

Creating MIP model......Done     0.00s

Cone types summary:
Cone       | Count    | Min dim  | Max dim 
       SOC |       64 |        3 |        3

Solving conic relaxation......Done     0.01s
 - Relaxation status    =        Optimal
 - Relaxation objective =       0.000000

Creating conic subproblem model......Done

Starting MIP-solver-driven outer approximation algorithm
doing lazy cb
new int solution in lazy
conic status Optimal
violating dual cuts added in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing incumbent cb
checked feas: rejecting
adding new sol
doing incumbent cb
checked feas: accepting
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing incumbent cb
checked feas: rejecting
adding new sol
doing incumbent cb
checked feas: accepting
doing lazy cb
new int solution in lazy
conic status Infeasible
viol cuts added on infeas solution in lazy
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing incumbent cb
checked feas: rejecting
adding new sol
doing incumbent cb
checked feas: accepting
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing incumbent cb
checked feas: rejecting
adding new sol
doing incumbent cb
checked feas: accepting
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing incumbent cb
checked feas: rejecting
adding new sol
doing incumbent cb
checked feas: accepting
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing incumbent cb
checked feas: rejecting
adding new sol
doing incumbent cb
checked feas: accepting
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing incumbent cb
checked feas: rejecting
adding new sol
doing incumbent cb
checked feas: accepting
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = -0.01594120690924683
prim_inf = -0.007840867025151965
prim_inf = -0.015710454313193623
prim_inf = -0.007850391619285801
prim_inf = -0.012244895453250138
prim_inf = -0.0067595321670523845
prim_inf = -0.01779136770983314
prim_inf = -0.009410257405761513
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = -0.01642498651835922
prim_inf = -0.008013245786969492
prim_inf = -0.004476131913179415
prim_inf = -0.001986273685361084
prim_inf = -0.012830841102640989
prim_inf = -0.006809151333072805
prim_inf = -0.01802024186736162
prim_inf = -0.009516230878944043
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = -0.017899818654314004
prim_inf = -0.008818804681141046
prim_inf = -0.018672940697797458
prim_inf = -0.0094059979519443
prim_inf = -0.018265163629166636
prim_inf = -0.010708276190598554
prim_inf = -0.015902277563782263
prim_inf = -0.008418325130151061
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = -0.01838761546605383
prim_inf = -0.009006208884784428
prim_inf = -0.00741389747508947
prim_inf = -0.0035015930407098494
prim_inf = -0.01879137094692851
prim_inf = -0.01085706555750221
prim_inf = -0.01613435244962602
prim_inf = -0.008528685552846582
size(m.b_orig) = (695,)
size(m.A_orig) = (695,229)
size(m.final_soln) = (229,)
Constraint cones violations:
viol_lin = 5.860900387233414e-8
viol_soc = 0.0
viol_rot = 0.0
Variable cones violations:
viol_lin = 0.0
viol_soc = 0.0
viol_rot = 0.0

Pajarito MICP solve summary:
 - Total time (s)       =       3.31e+00
 - Status               =        Optimal
 - Best feasible obj.   =  +6.545000e+03
 - Final OA obj. bound  =  +6.545000e+03
 - Relative opt. gap    =      0.000e+00
 - Conic solve count    =              8
 - Feas. solution count =              7
 - Integer repeat count =             47

Timers (s):
 - Setup                =       4.43e-02
 -- Transform data      =       2.83e-04
 -- Create conic data   =       1.64e-04
 -- Create MIP data     =       2.26e-03
 -- Load/solve relax    =       9.00e-03
 - MIP-driven algorithm =       3.27e+00
 -- Solve conic model   =       3.78e-02

WARNING: For the MIP-solver-driven algorithm, optimality tolerance must be specified as MIP solver option, not Pajarito option
WARNING: For the MIP-solver-driven algorithm, optimality tolerance must be specified as MIP solver option, not Pajarito option
#STATUS# Optimal
#OBJVAL# 6545.000000002223
#OBJBOUND# 6545.000000002223
#TIMESOLVER# 3.3146188259124756
#TIMEALL# 3.316506862640381
#SOLUTION# [8.683735894205476e-13,3.9999999999960396,3.5000000000003326,3.9999999999959654,3.4999999999990754,7.499999999995249,5.500000000003561,1.4088517100561407e-12,5.086608903051472e-13,5.500000000009411,5.500000000008332,2.093750740786383e-12,6545.000000002223,49.047466753687566,49.04746675368511,45.047466753688575,52.5474667536829,80.2294286342543,74.72942863424514,80.22942863426441,80.229428634265,-0.0,-0.0,-0.0,49.047466753687566,-0.0,49.047466753686905,-0.0,-0.0,49.047466753687566,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,49.04746675368511,-0.0,-0.0,49.04746675368511,-0.0,-0.0,-0.0,49.04746675368511,-0.0,-0.0,45.047466753688575,-0.0,-0.0,-0.0,-0.0,45.047466753688575,-0.0,45.047466753688575,-0.0,-0.0,-0.0,52.5474667536829,-0.0,-0.0,-0.0,-0.0,-0.0,52.5474667536829,-0.0,52.5474667536829,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,80.2294286342581,-0.0,80.2294286342543,-0.0,-0.0,80.2294286342543,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,74.72942863424514,-0.0,-0.0,74.72942863424514,-0.0,-0.0,-0.0,74.72942863424514,-0.0,-0.0,80.22942863426441,-0.0,-0.0,-0.0,-0.0,80.22942863426441,-0.0,80.22942863426441,-0.0,-0.0,-0.0,80.229428634265,-0.0,-0.0,-0.0,-0.0,-0.0,80.229428634265,-0.0,80.229428634265,-0.0,-0.0,-0.0,0.0,0.0,1.0,0.0,1.0,0.0,0.0,0.0,-0.0,1.0,0.0,-0.0,-0.0,-0.0,-0.0,-0.0,1.0,1.0,-0.0,0.0,1.0,-0.0,0.0,0.0,-0.0,49.04746675344392,-0.0,49.047466753661816,-0.0,45.047466751671536,-0.0,52.547466749263926,-0.0,80.2294286336481,-0.0,74.7294286336229,-0.0,80.2294285756554,-0.0,80.22942864897318,0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,1.4986513027786122e-13,1.4986513053905398e-13,1.4986513053905398e-13,1.4986513053905398e-13,1.4986513053905398e-13,1.4986513053905398e-13,1.4986513053905398e-13,1.4986513053905398e-13,2424.990539978447,6462.099354816297,2424.7084239326623,5606.498016215735,2041.7810434137805,6458.593111866311,2786.028708920714,6467.194888627226,1.4986513053905398e-13,1.4986513053905398e-13,1.4986513053905398e-13,1.4986513053905398e-13,1.4986513053905398e-13,1.4986513053905398e-13,1.4986513053905398e-13,1.4986513053905398e-13,2425.5822175899943,6462.658645531264,2411.052322130394,5590.040170904483,2042.3833833370195,6458.753918988208,2786.3505460876536,6467.539255201377,1.4986513053905398e-13,1.4986513053905398e-13,1.4986513053905398e-13,1.4986513053905398e-13,1.4986513053905398e-13,1.4986513053905398e-13,1.4986513053905398e-13,1.4986513053905398e-13,2427.3877651387024,6465.273601392296,2428.3353250111904,5610.88014838011,2047.9867161612829,6471.415386698828,2783.375151797138,6463.973327337447,1.4986513027786122e-13,1.4986513053905398e-13,1.4986513027786122e-13,1.4986513053905398e-13,1.4986513027786122e-13,1.4986513053905398e-13,1.4986513027786122e-13,1.4986513053905398e-13,2427.985536411976,6465.882244766361,2414.608518156799,5594.283704081134,2048.530920360123,6471.899527364794,2783.70086933201,6464.331593232024]
