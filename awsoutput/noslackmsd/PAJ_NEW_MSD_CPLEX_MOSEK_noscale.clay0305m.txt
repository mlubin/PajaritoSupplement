WARNING: Method definition require(Symbol) in module Base at loading.jl:345 overwritten in module ConicBenchmarkUtilities at /home/ubuntu/.julia/v0.5/Requires/src/require.jl:12.
#SOLVERNAME# PAJ_NEW_MSD_CPLEX_MOSEK_noscale
#SOLVER# Pajarito.PajaritoSolver(2,3600.0,1.0e-5,true,CPLEX.CplexSolver(Any[(:CPX_PARAM_THREADS,1),(:CPX_PARAM_TILIM,3600.0),(:CPX_PARAM_EPINT,1.0e-8),(:CPX_PARAM_EPRHS,1.0e-6),(:CPX_PARAM_SCRIND,0),(:CPX_PARAM_EPGAP,1.0e-5)]),CPLEX.CplexSolver(Any[]),0,false,true,Mosek.MosekMathProgSolverInterface.MosekSolver(Any[(:LOG,0),(:NUM_THREADS,1),(:OPTIMIZER_MAX_TIME,120.0)]),true,false,false,true,false,true,false,true,true,true,true,false,true,true,false,false,false,false,true,true,false,true,true,1.0e-10,1.0e-6,0.01,0.0001)
#INSTANCE# clay0305m.cbf.gz
#TIMELIMIT# 3600.0

Transforming original data......Done     0.00s

Creating conic model data......Done     0.00s

Creating MIP model......Done     0.00s

Cone types summary:
Cone       | Count    | Min dim  | Max dim 
       SOC |      120 |        3 |        3

Solving conic relaxation......Done     0.01s
 - Relaxation status    =        Optimal
 - Relaxation objective =       0.001371

Creating conic subproblem model......Done

Starting MIP-solver-driven outer approximation algorithm
doing lazy cb
new int solution in lazy
conic status Infeasible
violating dual cuts added in lazy
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing incumbent cb
checked feas: rejecting
adding new sol
doing incumbent cb
checked feas: accepting
doing lazy cb
new int solution in lazy
conic status Optimal
violating dual cuts added in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing incumbent cb
checked feas: rejecting
adding new sol
doing incumbent cb
checked feas: accepting
doing lazy cb
new int solution in lazy
conic status Optimal
violating dual cuts added in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing incumbent cb
checked feas: rejecting
adding new sol
doing incumbent cb
checked feas: accepting
doing lazy cb
new int solution in lazy
conic status Optimal
violating dual cuts added in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing incumbent cb
checked feas: rejecting
adding new sol
doing incumbent cb
checked feas: accepting
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing incumbent cb
checked feas: rejecting
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
violating dual cuts added in lazy
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing incumbent cb
checked feas: rejecting
adding new sol
doing incumbent cb
checked feas: accepting
doing lazy cb
new int solution in lazy
conic status Optimal
violating dual cuts added in lazy
adding new sol
prim_inf = -0.5877197990262175
prim_inf = -0.15718365327302308
prim_inf = -0.7781466253604776
prim_inf = -0.24325576962110063
prim_inf = -0.8034260443005223
prim_inf = -0.1997795281213257
prim_inf = -0.48868282294483834
prim_inf = -0.16750379728000553
prim_inf = -0.25134139939541456
prim_inf = -0.050125436075177277
prim_inf = -1.5528393338733473
prim_inf = -1.7462373240826103
prim_inf = -1.1478842230965576
prim_inf = -1.0122961324808912
prim_inf = -0.7012155613151947
prim_inf = -1.9905379061112143
prim_inf = -1.5679050203015379
prim_inf = -1.9930332974785685
prim_inf = -0.055428811284457424
prim_inf = -0.01714302797464029
prim_inf = -0.8545165431505666
prim_inf = -0.3547302529195804
prim_inf = -1.0837470461588055
prim_inf = -0.6259026615698531
prim_inf = -1.2698059150576455
prim_inf = -0.5502400103532636
prim_inf = -0.7433810803879624
prim_inf = -0.48394832488042994
prim_inf = -0.4676833551930031
prim_inf = -0.09736718065664718
prim_inf = -0.5824705610907586
prim_inf = -0.18394862431614456
prim_inf = -0.7628014259269094
prim_inf = -0.27427100912427704
prim_inf = -0.7972649607345375
prim_inf = -0.22025438235777983
prim_inf = -0.49269406877783695
prim_inf = -0.18266282582044369
prim_inf = -0.2553033386784591
prim_inf = -0.05953668400343304
prim_inf = -1.4855997591549226
prim_inf = -1.0115749962696867
prim_inf = -0.07514409946999834
prim_inf = -0.022347997304095202
prim_inf = -0.6449901170942525
prim_inf = -1.3412237450455393
prim_inf = -1.5364532693131778
prim_inf = -1.4811242542564003
prim_inf = -0.9394380166801568
prim_inf = -1.7071585084290142
prim_inf = -1.1817939905075718
prim_inf = -0.7873685632839624
prim_inf = -1.28393588718734
prim_inf = -1.041679149381821
prim_inf = -1.3858129531682835
prim_inf = -0.7629515482333318
prim_inf = -0.8920374854249076
prim_inf = -0.7020716595818612
prim_inf = -1.1595364036813862
prim_inf = -0.4684753698361419
prim_inf = -0.4751173701799871
prim_inf = -0.15669185823389853
prim_inf = -0.5902461296827823
prim_inf = -0.23914174913261377
prim_inf = -0.7184485130856046
prim_inf = -0.1995624888331804
prim_inf = -0.4471773846905762
prim_inf = -0.16645884323679638
prim_inf = -0.1742224677698232
prim_inf = -0.05183857394786173
prim_inf = -1.5632409627031407
prim_inf = -1.747907652951028
prim_inf = -1.178140373455804
prim_inf = -1.0163936576099317
prim_inf = -1.5629185105297516
prim_inf = -1.9929674901695265
prim_inf = -0.9743648660769395
prim_inf = -1.991776447379845
prim_inf = -0.06933981754542273
prim_inf = -0.01958082112062698
prim_inf = -0.6524104956899919
prim_inf = -0.3807231850446442
prim_inf = -0.7629513994070294
prim_inf = -0.659313118349246
prim_inf = -1.1106825788552896
prim_inf = -0.5721370597193527
prim_inf = -0.6717669716542787
prim_inf = -0.491701867638767
prim_inf = -0.2819346409228274
prim_inf = -0.12405260498417192
prim_inf = -0.48262604943033693
prim_inf = -0.1870012249746651
prim_inf = -0.5905902325080206
prim_inf = -0.27800557717910124
prim_inf = -0.717108359213853
prim_inf = -0.22129995149953174
prim_inf = -0.4534711468400019
prim_inf = -0.18216393669445097
prim_inf = -0.18607675750217822
prim_inf = -0.066992268730246
prim_inf = -1.4988570540657449
prim_inf = -1.0172960705702891
prim_inf = -0.10729574542287779
prim_inf = -0.019639685448851196
prim_inf = -1.53186690918713
prim_inf = -1.4755364760611158
prim_inf = -0.9211040888003339
prim_inf = -1.4091014697260427
prim_inf = -0.9938234697492945
prim_inf = -1.7023301884511817
prim_inf = -0.9487402363271258
prim_inf = -0.8098759217850784
prim_inf = -0.9554218280666191
prim_inf = -1.0662759009876481
prim_inf = -1.2314737191831
prim_inf = -0.7827719439565044
prim_inf = -0.8131576622289458
prim_inf = -0.7092249603813343
prim_inf = -0.7378030359427612
prim_inf = -0.5001019103081035
size(m.b_orig) = (786,)
size(m.A_orig) = (786,206)
size(m.final_soln) = (206,)
Constraint cones violations:
viol_lin = 0.0
viol_soc = 0.0
viol_rot = 0.0
Variable cones violations:
viol_lin = 0.0
viol_soc = 0.0
viol_rot = 0.0

Pajarito MICP solve summary:
 - Total time (s)       =       2.59e+01
 - Status               =        Optimal
 - Best feasible obj.   =  +8.092500e+03
 - Final OA obj. bound  =  +8.092500e+03
 - Relative opt. gap    =      0.000e+00
 - Conic solve count    =             11
 - Feas. solution count =             10
 - Integer repeat count =             60

Timers (s):
 - Setup                =       4.68e-02
 -- Transform data      =       2.58e-04
 -- Create conic data   =       1.70e-04
 -- Create MIP data     =       2.68e-03
 -- Load/solve relax    =       8.84e-03
 - MIP-driven algorithm =       2.58e+01
 -- Solve conic model   =       4.87e-02

WARNING: For the MIP-solver-driven algorithm, optimality tolerance must be specified as MIP solver option, not Pajarito option
WARNING: For the MIP-solver-driven algorithm, optimality tolerance must be specified as MIP solver option, not Pajarito option
#STATUS# Optimal
#OBJVAL# 8092.50000006003
#OBJBOUND# 8092.50000006003
#TIMESOLVER# 25.8515408039093
#TIMEALL# 25.854023933410645
#SOLUTION# [1.2511544159878832e-11,4.000000000007032,3.5000000000086744,4.684533005196157e-11,4.000000000019205,3.500000000012832,1.105035456936675e-10,7.500000000016214,4.000000000065267,3.5000000000208975,5.500000000009418,1.2460938054779154e-11,1.430188502355601e-11,6.500000000118888,5.500000000023761,5.500000000014786,12.000000000166091,3.3367514481705285e-11,6.500000000138201,6.500000000110545,8092.50000006003,49.97436650159875,49.97436650160051,45.97436650159744,53.47436650160078,49.97436650160623,78.78037327610534,73.28037327610038,78.78037327610625,78.78037327610556,85.28037327617855,0.0,-0.0,1.0,0.0,-0.0,-0.0,0.0,1.0,-0.0,-0.0,0.0,1.0,0.0,0.0,0.0,-0.0,0.0,-0.0,-0.0,0.0,0.0,-0.0,0.0,1.0,1.0,1.0,1.0,0.0,1.0,1.0,1.0,0.0,0.0,-0.0,0.0,-0.0,0.0,0.0,-0.0,-0.0,1493.743217828704,5591.978182698742,0.0,1621.9187383910391,4926.345301788511,-0.0,1452.4444831870208,5487.573168717142,-0.0,1858.660517733417,5390.906238184981,-0.0,1062.296426447229,6365.918878001982,0.0,29.306767040736222,25.85495644264495,1.0,29.748596312194987,36.559970015466284,1.0,47.367841201758644,17.61086691234007,1.0,29.12258115386543,23.563627476955457,1.0,21.0928815547169,77.77006006984927,1.0,533.5706796040272,1227.9299903246385,-0.0,592.9650695220429,967.6791308103133,0.0,574.4748995910545,1265.1755342645215,0.0,804.2703773500896,1209.832677154714,0.0,312.7750118561549,1580.9289629064351,-0.0,1488.2102170431112,4765.438997288571,1601.7989377791755,4281.520591555779,1445.0032250279567,5086.959150222383,1863.6081445397508,4981.719058491251,1064.7104347541754,5310.536743858163,25.543816915522708,36.533305259844646,12.95291969899443,85.97323083390073,45.38877235121599,23.12548774787853,27.18407288675967,29.249774893360033,39.093314581079234,22.501665975302704,746.9884572420228,1096.5678821982497,758.6879215746902,901.7303107356764,682.9192305363313,1203.598318284854,912.2045719496535,1147.1304733508348,570.3986626189417,1319.1710744568252,1842.1211466200416,5590.486016695807,2100.345222400582,4914.833752111142,1646.1526089906367,5486.911555819356,2007.1825231384717,5387.833430292365,1707.0043924425845,6371.517655586915,28.81762688949207,26.021317793492845,29.964457899107796,36.712212442984224,29.96972149892299,23.35242091389248,39.526320092199484,20.113945244808352,20.773643833477806,77.86699931989297,749.956783450977,1247.6510999176808,891.2856526047832,991.8029906410753,687.2696175916096,1284.5844138038688,902.2779416511871,1216.054564168661,697.430639672241,1603.4303888008203,1851.2394063674672,4773.464081940301,2100.858114875223,4290.807690936362,1644.4326850762614,5089.949863720567,2015.353200907227,4980.351645113484,1718.165307586124,5331.0230253710415,25.18353314291319,36.74590964741463,12.809177489398182,85.85431622398997,28.018117474214847,28.94323603402931,37.57248357148556,25.738864202833927,40.291033320492645,22.148111439158487,961.4112709721958,1117.3097354037948,1055.5368677247168,925.4828397967811,795.2625622292886,1223.20047649322,1009.7986380655492,1153.489346637373,949.4990812159435,1346.9977166990748]
