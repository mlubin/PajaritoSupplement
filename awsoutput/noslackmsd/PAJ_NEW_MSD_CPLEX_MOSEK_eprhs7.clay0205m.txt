WARNING: Method definition require(Symbol) in module Base at loading.jl:345 overwritten in module ConicBenchmarkUtilities at /home/ubuntu/.julia/v0.5/Requires/src/require.jl:12.
#SOLVERNAME# PAJ_NEW_MSD_CPLEX_MOSEK_eprhs7
#SOLVER# Pajarito.PajaritoSolver(2,3600.0,1.0e-5,true,CPLEX.CplexSolver(Any[(:CPX_PARAM_THREADS,1),(:CPX_PARAM_TILIM,3600.0),(:CPX_PARAM_EPINT,1.0e-8),(:CPX_PARAM_EPRHS,1.0e-7),(:CPX_PARAM_SCRIND,0),(:CPX_PARAM_EPGAP,1.0e-5)]),CPLEX.CplexSolver(Any[]),0,false,true,Mosek.MosekMathProgSolverInterface.MosekSolver(Any[(:LOG,0),(:NUM_THREADS,1),(:OPTIMIZER_MAX_TIME,120.0)]),true,false,false,true,false,true,false,true,true,true,true,false,true,true,false,true,false,false,true,true,false,true,true,1.0e-10,1.0e-6,0.01,0.0001)
#INSTANCE# clay0205m.cbf.gz
#TIMELIMIT# 3600.0

Transforming original data......Done     0.00s

Creating conic model data......Done     0.00s

Creating MIP model......Done     0.00s

Cone types summary:
Cone       | Count    | Min dim  | Max dim 
       SOC |       80 |        3 |        3

Solving conic relaxation......Done     0.01s
 - Relaxation status    =        Optimal
 - Relaxation objective =       0.000010

Creating conic subproblem model......Done

Starting MIP-solver-driven outer approximation algorithm
doing lazy cb
new int solution in lazy
conic status Infeasible
violating dual cuts added in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
new int solution in lazy
conic status Infeasible
violating dual cuts added in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
new int solution in lazy
conic status Infeasible
violating dual cuts added in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
violating dual cuts added in lazy
doing lazy cb
new int solution in lazy
conic status Optimal
violating dual cuts added in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
violating dual cuts added in lazy
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
violating dual cuts added in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
doing lazy cb
new int solution in lazy
conic status Optimal
violating dual cuts added in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
violating dual cuts added in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
violating dual cuts added in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
prim_inf = 1.1299539437459316e-7
prim_inf = 3.932973413611762e-7
prim_inf = 1.2811517535737948e-7
prim_inf = -0.16941343082453386
prim_inf = 7.221115083666518e-8
prim_inf = -0.4364878497481186
prim_inf = 1.8174046090280171e-7
prim_inf = 4.1567454900359735e-7
prim_inf = 3.342490799695952e-7
prim_inf = 4.4543321564560756e-7
prim_inf = -0.42369749505457044
prim_inf = 1.0290804652868246e-8
prim_inf = 3.867786482203428e-7
prim_inf = 3.9476333313359646e-10
prim_inf = -1.6061655042392111
prim_inf = 4.545499550090426e-7
prim_inf = 7.354041215990037e-7
prim_inf = 4.5454997099625416e-7
prim_inf = 7.351356643425788e-7
prim_inf = -0.7382725526447151
prim_inf = 1.1292377166682854e-7
prim_inf = 4.384946805657819e-7
prim_inf = 1.2894599876744905e-7
prim_inf = -0.18858290559001034
prim_inf = 7.222183739941102e-8
prim_inf = 4.477597030927427e-7
prim_inf = 1.7998559087573085e-7
prim_inf = 4.489656930672936e-7
prim_inf = 3.3423884815420024e-7
prim_inf = 5.419765329861548e-7
prim_inf = -0.2163753131125894
prim_inf = 2.9235727705412273e-7
prim_inf = -0.9908365107948498
prim_inf = 1.1153684198461633e-8
prim_inf = 4.348931881281715e-9
prim_inf = 1.679482908301111e-8
prim_inf = -0.9274826414264581
prim_inf = -0.7869782531321348
prim_inf = 7.351410182820928e-7
prim_inf = 2.3921131742099533e-10
prim_inf = 1.5709565559518524e-7
prim_inf = 4.774756234837696e-7
prim_inf = 6.327854862320237e-8
prim_inf = 3.378017936483957e-7
prim_inf = 5.511788003786933e-8
prim_inf = -0.44300705019850284
prim_inf = 1.4300053408078384e-7
prim_inf = 4.156736395088956e-7
prim_inf = 1.975963641598355e-7
prim_inf = 4.735584298032336e-7
prim_inf = 9.229388480136436e-7
prim_inf = 1.0291014262975295e-8
prim_inf = 3.267483350555267e-8
prim_inf = 3.95857568946667e-10
prim_inf = 3.3755104311694595e-7
prim_inf = 4.545499550090426e-7
prim_inf = -0.8700673611147938
prim_inf = 6.210608027856779e-8
prim_inf = 9.056731364864845e-7
prim_inf = 4.920952534348544e-12
prim_inf = 1.570981567056151e-7
prim_inf = 5.188958311919123e-7
prim_inf = 6.328423296508845e-8
prim_inf = 3.871127773891203e-7
prim_inf = 5.511833478522021e-8
prim_inf = 4.477842594496906e-7
prim_inf = 1.4235320122679695e-7
prim_inf = 4.4800708565162495e-7
prim_inf = 1.9759613678616006e-7
prim_inf = 6.014529390085954e-7
prim_inf = 9.229388338027888e-7
prim_inf = 2.9235727705412273e-7
prim_inf = -0.2229504477989277
prim_inf = 1.1153705514743706e-8
prim_inf = 4.5483854549388525e-7
prim_inf = 3.996010544682349e-8
prim_inf = -0.1352114270240552
prim_inf = 9.92980273561983e-8
prim_inf = 6.50106493083058e-8
prim_inf = 2.3810287075320957e-10
size(m.b_orig) = (596,)
size(m.A_orig) = (596,161)
size(m.final_soln) = (161,)
Constraint cones violations:
viol_lin = 1.4210854715202004e-14
viol_soc = 0.005269087851047516
viol_rot = 0.0
Variable cones violations:
viol_lin = 0.0
viol_soc = 0.0
viol_rot = 0.0

Pajarito MICP solve summary:
 - Total time (s)       =       1.73e+01
 - Status               =        Optimal
 - Best feasible obj.   =  +8.092500e+03
 - Final OA obj. bound  =  +8.092500e+03
 - Relative opt. gap    =      0.000e+00
 - Conic solve count    =             14
 - Feas. solution count =             11
 - Integer repeat count =             53

Timers (s):
 - Setup                =       4.21e-02
 -- Transform data      =       2.05e-04
 -- Create conic data   =       1.19e-04
 -- Create MIP data     =       2.17e-03
 -- Load/solve relax    =       6.61e-03
 - MIP-driven algorithm =       1.72e+01
 -- Solve conic model   =       4.52e-02

WARNING: For the MIP-solver-driven algorithm, optimality tolerance must be specified as MIP solver option, not Pajarito option
WARNING: For the MIP-solver-driven algorithm, optimality tolerance must be specified as MIP solver option, not Pajarito option
#STATUS# Optimal
#OBJVAL# 8092.5
#OBJBOUND# 8092.5
#TIMESOLVER# 17.251233100891113
#TIMEALL# 17.253215074539185
#SOLUTION# [0.0,4.000000000000003,3.5,0.0,4.0,3.5,0.0,7.5,4.0,3.5,5.5,0.0,0.0,6.500000000000002,5.5,5.499999999999986,12.0,0.0,6.5,6.500000000000014,8092.5,49.77186997291214,49.77186997291214,53.77186997291214,46.27186997291214,49.77186997291214,81.27414726280954,86.77414726280954,81.27414726280954,81.27414726280955,74.77414726280954,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,0.0,1.0,1.0,1041.4735326512753,5516.647866579275,0.0,977.9297888948267,6866.070211105173,0.0,1389.1922410840034,6774.807758915997,0.0,916.3860282938222,5296.075408899922,0.0,916.3859583391945,4661.358146078447,0.0,9.65507861152608,18.268334725038926,1.0,13.898950617576077,86.00980743510354,1.0,27.014058323720178,7.695891059395137,1.0,22.35520496529267,7.69589105939515,1.0,22.355204968427643,5.090548458820592,1.0,1041.4735326885557,4661.358162254487,977.9297884881853,6091.070211511815,1389.1922410764896,4868.430536083843,916.3860290987789,4868.430533147521,916.3859583439098,3754.5201050822716,8.453770109428234,2.978567088886278,28.040912414765785,18.268334716725803,5.1613931604220795,0.051009450070663126,42.15111052615416,0.47759225007251715,22.355204968365115,76.14050598190784,1389.1921820811117,5516.647634344971,1464.735984848558,6284.389362639662,1621.8234663918734,6803.176533608126,1041.473517011376,5296.075408900266,1542.2796186960645,4661.358080514943,5.161390330526359,18.26833472503688,10.705132928412468,86.00980743505579,27.79260815180521,7.695891059395137,13.608727737295794,7.695892765719805,18.2488643488785,2.9785676704580304,1389.1921820794378,4661.357974825955,1464.7359848444244,5516.647883641252,1621.8234663915396,4868.430536025003,1041.4735173487877,4868.430535482845,1542.279618696265,3754.5199934001557,5.1613903305264035,2.978567088886278,12.159685254266492,18.268334716725576,27.792606463298966,0.051009437897200735,8.049951329048362,0.05100940671483579,18.24887243977753,76.14050598195058]
