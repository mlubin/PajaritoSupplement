WARNING: Method definition require(Symbol) in module Base at loading.jl:345 overwritten in module ConicBenchmarkUtilities at /home/ubuntu/.julia/v0.5/Requires/src/require.jl:12.
#SOLVERNAME# PAJ_NEW_MSD_CPLEX_MOSEK_eprhs8
#SOLVER# Pajarito.PajaritoSolver(2,3600.0,1.0e-5,true,CPLEX.CplexSolver(Any[(:CPX_PARAM_THREADS,1),(:CPX_PARAM_TILIM,3600.0),(:CPX_PARAM_EPINT,1.0e-8),(:CPX_PARAM_EPRHS,1.0e-8),(:CPX_PARAM_SCRIND,0),(:CPX_PARAM_EPGAP,1.0e-5)]),CPLEX.CplexSolver(Any[]),0,false,true,Mosek.MosekMathProgSolverInterface.MosekSolver(Any[(:LOG,0),(:NUM_THREADS,1),(:OPTIMIZER_MAX_TIME,120.0)]),true,false,false,true,false,true,false,true,true,true,true,false,true,true,false,true,false,false,true,true,false,true,true,1.0e-10,1.0e-6,0.01,0.0001)
#INSTANCE# clay0204h.cbf.gz
#TIMELIMIT# 3600.0

Transforming original data......Done     0.00s

Creating conic model data......Done     0.00s

Creating MIP model......Done     0.00s

Cone types summary:
Cone       | Count    | Min dim  | Max dim 
       SOC |       64 |        3 |        3

Solving conic relaxation......Done     0.01s
 - Relaxation status    =        Optimal
 - Relaxation objective =       0.000000

Creating conic subproblem model......Done

Starting MIP-solver-driven outer approximation algorithm
doing lazy cb
new int solution in lazy
conic status Optimal
violating dual cuts added in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing incumbent cb
checked feas: accepting
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Infeasible
viol cuts added on infeas solution in lazy
doing lazy cb
new int solution in lazy
conic status Infeasible
viol cuts added on infeas solution in lazy
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing incumbent cb
checked feas: accepting
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = -2.220446049250313e-16
prim_inf = -2.220446049250313e-16
prim_inf = -0.017999966446950566
prim_inf = -0.00984895453802892
prim_inf = -0.011764484268951492
prim_inf = -0.00645439453637664
prim_inf = -0.01875145258691191
prim_inf = -0.009375133347930387
prim_inf = -0.014319730030365463
prim_inf = -0.007195850995231012
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = -2.220446049250313e-16
prim_inf = -2.220446049250313e-16
prim_inf = -0.008484789973863371
prim_inf = -0.004969628593244124
prim_inf = -0.015478835512567457
prim_inf = -0.00817434458531352
prim_inf = -0.014257648877446627
prim_inf = -0.007268089902026986
prim_inf = -0.009082459238925367
prim_inf = -0.0046418965812335955
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = -2.220446049250313e-16
prim_inf = -2.220446049250313e-16
prim_inf = -0.02103496459676535
prim_inf = -0.01100652613422426
prim_inf = -0.015139196875679772
prim_inf = -0.008682507002959028
prim_inf = -0.015536378546585183
prim_inf = -0.007821518869604915
prim_inf = -0.01892584192864888
prim_inf = -0.0092500042374013
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = -2.220446049250313e-16
prim_inf = -2.220446049250313e-16
prim_inf = -0.011024775301393674
prim_inf = -0.006721911786371493
prim_inf = -0.018679957691801974
prim_inf = -0.010528525555855595
prim_inf = -0.011043053816138126
prim_inf = -0.00566995454573771
prim_inf = -0.01344153636637202
prim_inf = -0.006968448095904023
size(m.b_orig) = (695,)
size(m.A_orig) = (695,229)
size(m.final_soln) = (229,)
Constraint cones violations:
viol_lin = 4.4747920924237405e-9
viol_soc = 0.0
viol_rot = 0.0
Variable cones violations:
viol_lin = 0.0
viol_soc = 0.0
viol_rot = 0.0

Pajarito MICP solve summary:
 - Total time (s)       =       5.67e+00
 - Status               =        Optimal
 - Best feasible obj.   =  +6.545000e+03
 - Final OA obj. bound  =  +6.545000e+03
 - Relative opt. gap    =      0.000e+00
 - Conic solve count    =             14
 - Feas. solution count =             12
 - Integer repeat count =             38

Timers (s):
 - Setup                =       4.36e-02
 -- Transform data      =       2.74e-04
 -- Create conic data   =       1.45e-04
 -- Create MIP data     =       1.96e-03
 -- Load/solve relax    =       8.43e-03
 - MIP-driven algorithm =       5.62e+00
 -- Solve conic model   =       6.25e-02

WARNING: For the MIP-solver-driven algorithm, optimality tolerance must be specified as MIP solver option, not Pajarito option
WARNING: For the MIP-solver-driven algorithm, optimality tolerance must be specified as MIP solver option, not Pajarito option
#STATUS# Optimal
#OBJVAL# 6544.999999996516
#OBJBOUND# 6544.999999996516
#TIMESOLVER# 5.665052175521851
#TIMEALL# 5.667553901672363
#SOLUTION# [3.962779109857414e-12,4.0000000000021005,3.499999999989914,4.000000000005541,3.4999999999955107,7.499999999997112,5.499999999997679,6.106412968337072e-12,1.7605806432817961e-12,5.499999999978434,5.499999999981271,1.0273535540477826e-11,6544.999999996516,48.69261936613325,48.69261936613322,52.69261936613504,45.19261936613494,76.28681885270754,81.78681885267898,76.28681885269965,76.28681885269152,-0.0,-0.0,48.69261936613325,-0.0,48.69261936613325,-0.0,-0.0,-0.0,-0.0,48.69261936613194,-0.0,-0.0,-0.0,-0.0,48.69261936613322,-0.0,-0.0,-0.0,-0.0,48.69261936613322,-0.0,-0.0,-0.0,48.69261936613322,52.69261936613504,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,52.69261936613504,-0.0,52.69261936613504,-0.0,-0.0,-0.0,45.19261936613494,-0.0,-0.0,-0.0,-0.0,-0.0,45.19261936613494,-0.0,45.19261936613494,-0.0,-0.0,-0.0,-0.0,76.28681885270754,-0.0,76.28681885270754,-0.0,-0.0,-0.0,-0.0,76.28681885270754,-0.0,-0.0,-0.0,-0.0,81.78681885270042,-0.0,-0.0,-0.0,-0.0,81.7868188526922,-0.0,-0.0,-0.0,81.7868188527052,76.28681885269965,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,76.28681885269965,-0.0,76.28681885269965,-0.0,-0.0,-0.0,76.28681885269152,-0.0,-0.0,-0.0,-0.0,-0.0,76.28681885269152,-0.0,76.28681885269152,-0.0,-0.0,0.0,1.0,0.0,0.0,0.0,1.0,1.0,-0.0,-0.0,0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,1.0,1.0,-0.0,1.0,-0.0,0.0,-0.0,48.69261936598442,-0.0,48.69261936582227,-0.0,52.69261936166025,-0.0,45.192619366222125,-0.0,76.2868188519161,-0.0,81.78681885099158,-0.0,76.28681885147947,-0.0,76.28681885148869,0.0,0.0,0.0,1.1102230246251565e-16,1.0,1.0,1.0,0.9999999999999999,4.759355224188049e-13,4.75935523407043e-13,4.759355224188049e-13,4.759355224188049e-13,4.759355224188049e-13,4.759355224188049e-13,4.67823955048889e-13,4.67823956037127e-13,2392.5126736285165,5848.484359056363,2385.0062123793577,6710.743848763912,2802.799705912661,5847.092029809534,2057.108573489732,5840.696707066528,4.759355224188049e-13,4.759355224188049e-13,4.759355224188049e-13,4.759355224188049e-13,4.759355224188049e-13,4.759355224188049e-13,4.661586217305512e-13,4.661586207423131e-13,2381.0768737104854,5834.178058234062,2389.471982110783,6716.5394622222775,2796.454647429339,5840.908475270103,2051.6945819931325,5833.21964721218,4.759355224188049e-13,4.759355224188049e-13,4.759355224188049e-13,4.759355224188049e-13,4.759355224188049e-13,4.759355224188049e-13,4.694892903437029e-13,4.694892913319409e-13,2396.1834041219563,5851.888686401445,2389.0629401036254,6718.253702582376,2798.2572348731956,5842.531360586804,2061.893756206325,5846.724447048456,4.759355224188049e-13,4.75935523407043e-13,4.759355224188049e-13,4.75935523407043e-13,4.759355224188049e-13,4.75935523407043e-13,4.67823956037127e-13,4.67823956037127e-13,2384.118850028668,5839.307735951488,2393.334123533618,6724.488448555865,2791.9333614131665,5836.227128686156,2056.198755956857,5840.030176145176]
