WARNING: Method definition require(Symbol) in module Base at loading.jl:345 overwritten in module ConicBenchmarkUtilities at /home/ubuntu/.julia/v0.5/Requires/src/require.jl:12.
#SOLVERNAME# PAJ_NEW_MSD_CPLEX_MOSEK_noprimsocdisagg
#SOLVER# Pajarito.PajaritoSolver(2,3600.0,1.0e-5,true,CPLEX.CplexSolver(Any[(:CPX_PARAM_THREADS,1),(:CPX_PARAM_TILIM,3600.0),(:CPX_PARAM_EPINT,1.0e-8),(:CPX_PARAM_EPRHS,1.0e-6),(:CPX_PARAM_SCRIND,0),(:CPX_PARAM_EPGAP,1.0e-5)]),CPLEX.CplexSolver(Any[]),0,false,true,Mosek.MosekMathProgSolverInterface.MosekSolver(Any[(:LOG,0),(:NUM_THREADS,1),(:OPTIMIZER_MAX_TIME,120.0)]),true,false,false,true,false,true,false,true,true,true,true,false,true,true,false,true,false,false,true,true,false,false,true,1.0e-10,1.0e-6,0.01,0.0001)
#INSTANCE# clay0205h.cbf.gz
#TIMELIMIT# 3600.0

Transforming original data......Done     0.00s

Creating conic model data......Done     0.00s

Creating MIP model......Done     0.00s

Cone types summary:
Cone       | Count    | Min dim  | Max dim 
       SOC |       80 |        3 |        3

Solving conic relaxation......Done     0.01s
 - Relaxation status    =        Optimal
 - Relaxation objective =       0.000552

Creating conic subproblem model......Done

Starting MIP-solver-driven outer approximation algorithm
doing lazy cb
new int solution in lazy
conic status Optimal
violating dual cuts added in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing incumbent cb
checked feas: rejecting
adding new sol
doing incumbent cb
checked feas: accepting
doing lazy cb
new int solution in lazy
conic status Infeasible
viol cuts added on infeas solution in lazy
doing lazy cb
new int solution in lazy
conic status Stall
viol cuts added on infeas solution in lazy
doing lazy cb
new int solution in lazy
conic status Optimal
violating dual cuts added in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing incumbent cb
checked feas: rejecting
doing lazy cb
new int solution in lazy
conic status Optimal
violating dual cuts added in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing incumbent cb
checked feas: rejecting
doing lazy cb
feasible solution in lazy
doing incumbent cb
checked feas: accepting
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
violating dual cuts added in lazy
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
violating dual cuts added in lazy
adding new sol
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing incumbent cb
checked feas: rejecting
adding new sol
doing incumbent cb
checked feas: accepting
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing incumbent cb
checked feas: rejecting
adding new sol
doing incumbent cb
checked feas: accepting
doing lazy cb
new int solution in lazy
conic status Optimal
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing lazy cb
repeat int solution in lazy
viol cuts added on infeas solution in lazy
doing incumbent cb
checked feas: rejecting
adding new sol
doing incumbent cb
checked feas: accepting
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = -0.017844899753526988
prim_inf = -0.009594071559149597
prim_inf = -0.01414727816472805
prim_inf = -0.008597503151577257
prim_inf = -0.015615119993981352
prim_inf = -0.007634439546563954
prim_inf = -0.016836907844663074
prim_inf = -0.0097268500858263
prim_inf = -0.0004436663984961342
prim_inf = -0.00024011640380194876
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = -0.014989344125297066
prim_inf = -0.00814715672913735
prim_inf = -0.0005146120188328496
prim_inf = -0.00030031220921955537
prim_inf = -0.014053045865239255
prim_inf = -0.006886368374580343
prim_inf = -0.015528423942214431
prim_inf = -0.009021603898872854
prim_inf = -0.014159554008983832
prim_inf = -0.00786465510918788
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = -0.017892872614538646
prim_inf = -0.009565658836436342
prim_inf = -0.014241785110243654
prim_inf = -0.008565238795199548
prim_inf = -0.02081986461280394
prim_inf = -0.010151644579309504
prim_inf = -0.014339011306674365
prim_inf = -0.008314216121107165
prim_inf = -0.0005287196090648649
prim_inf = -0.0002714400015975116
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = 0.0
prim_inf = -0.015028122926196374
prim_inf = -0.008125049919726735
prim_inf = -0.0005756716723226418
prim_inf = -0.0003714720141942962
prim_inf = -0.019244289428570482
prim_inf = -0.009438705425964145
prim_inf = -0.013024562924329075
prim_inf = -0.007599507751365309
prim_inf = -0.01442065199080389
prim_inf = -0.007628040012605197
size(m.b_orig) = (1006,)
size(m.A_orig) = (1006,341)
size(m.final_soln) = (341,)
Constraint cones violations:
viol_lin = 5.704237082682084e-11
viol_soc = 0.0
viol_rot = 0.0
Variable cones violations:
viol_lin = 0.0
viol_soc = 0.0
viol_rot = 0.0

Pajarito MICP solve summary:
 - Total time (s)       =       2.12e+01
 - Status               =        Optimal
 - Best feasible obj.   =  +8.092500e+03
 - Final OA obj. bound  =  +8.092500e+03
 - Relative opt. gap    =      0.000e+00
 - Conic solve count    =             11
 - Feas. solution count =              9
 - Integer repeat count =             18

Timers (s):
 - Setup                =       4.94e-02
 -- Transform data      =       3.86e-04
 -- Create conic data   =       2.21e-04
 -- Create MIP data     =       3.00e-03
 -- Load/solve relax    =       1.16e-02
 - MIP-driven algorithm =       2.11e+01
 -- Solve conic model   =       8.44e-02

WARNING: For the MIP-solver-driven algorithm, optimality tolerance must be specified as MIP solver option, not Pajarito option
WARNING: For the MIP-solver-driven algorithm, optimality tolerance must be specified as MIP solver option, not Pajarito option
#STATUS# Optimal
#OBJVAL# 8092.500000002159
#OBJBOUND# 8092.500000002159
#TIMESOLVER# 21.15556001663208
#TIMEALL# 21.15927481651306
#SOLUTION# [8.524993726119717e-13,4.0000000000355485,3.5000000000012648,2.2829375171962866e-11,4.000000000019654,3.4999999999983338,3.039788758629165e-11,7.500000000022081,4.000000000039282,3.499999999995116,5.499999999932925,2.2521616397956254e-12,-5.267363469166008e-13,6.500000000038611,5.499999999982126,5.500000000002999,12.000000000034271,3.404795978554836e-12,6.500000000053274,6.500000000038839,8092.500000002159,49.97724655263078,49.97724655263363,45.97724655261931,53.47724655263014,49.97724655264055,78.78360733349777,73.28360733355481,78.78360733349496,78.78360733351562,85.28360733353779,-0.0,-0.0,-0.0,49.97724655263078,-0.0,49.97724655263078,-0.0,-0.0,49.97724655263078,-0.0,-0.0,-0.0,-0.0,-0.0,49.97724655263078,-0.0,-0.0,-0.0,-0.0,49.97724655263363,-0.0,-0.0,49.97724655263363,-0.0,-0.0,-0.0,49.97724655263363,-0.0,-0.0,-0.0,49.97724655263363,-0.0,-0.0,45.97724655261931,-0.0,-0.0,-0.0,-0.0,45.97724655261931,-0.0,45.97724655261931,-0.0,-0.0,-0.0,-0.0,-0.0,45.97724655261931,-0.0,53.47724655263014,-0.0,-0.0,-0.0,-0.0,-0.0,53.47724655263014,-0.0,53.47724655263014,-0.0,-0.0,-0.0,-0.0,-0.0,53.47724655263014,-0.0,-0.0,-0.0,49.97724655264055,-0.0,-0.0,-0.0,49.97724655264055,-0.0,-0.0,-0.0,49.97724655264055,-0.0,-0.0,-0.0,49.97724655264055,-0.0,-0.0,-0.0,-0.0,78.78360733349777,-0.0,78.78360733349777,-0.0,-0.0,78.78360733349777,-0.0,-0.0,-0.0,-0.0,-0.0,78.78360733349777,-0.0,-0.0,-0.0,-0.0,73.28360733355481,-0.0,-0.0,73.28360733355481,-0.0,-0.0,-0.0,73.28360733355481,-0.0,-0.0,-0.0,73.28360733355481,-0.0,-0.0,78.78360733349496,-0.0,-0.0,-0.0,-0.0,78.78360733349496,-0.0,78.78360733349496,-0.0,-0.0,-0.0,-0.0,-0.0,78.78360733349496,-0.0,78.78360733351562,-0.0,-0.0,-0.0,-0.0,-0.0,78.78360733351562,-0.0,78.78360733351562,-0.0,-0.0,-0.0,-0.0,-0.0,78.78360733351562,-0.0,-0.0,-0.0,85.28360733353779,-0.0,-0.0,-0.0,85.28360733353779,-0.0,-0.0,-0.0,85.28360733353779,-0.0,-0.0,-0.0,85.28360733353779,-0.0,0.0,-0.0,1.0,-0.0,0.0,1.0,-0.0,-0.0,0.0,0.0,0.0,1.0,1.0,0.0,-0.0,0.0,-0.0,-0.0,0.0,-0.0,-0.0,0.0,1.0,1.0,1.0,0.0,0.0,-0.0,1.0,-0.0,-0.0,0.0,0.0,1.0,-0.0,0.0,-0.0,-0.0,1.0,0.0,-0.0,49.97724655263078,-0.0,49.97724655263363,-0.0,45.97724655261931,-0.0,53.47724655263014,-0.0,49.97724655264055,-0.0,78.78360733349777,-0.0,73.28360733355481,-0.0,78.78360733349496,-0.0,78.78360733351562,-0.0,85.28360733353779,0.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,1.0,5.26736346898422e-13,5.267363469024618e-13,5.26736346898422e-13,5.267363469004419e-13,5.26736346898422e-13,5.267363469004419e-13,5.26736346898422e-13,5.267363469004419e-13,5.26736346898422e-13,5.267363469004419e-13,2520.2205574241025,6236.779613461267,2515.5261204638264,5393.677463586542,2130.5493389529597,6230.644325848721,2884.103942582019,6237.195758301543,2498.2795961228785,7274.167123288351,5.26736346898422e-13,5.267363469004419e-13,5.26736346898422e-13,5.267363469004419e-13,5.26736346898422e-13,5.267363469004419e-13,5.26736346898422e-13,5.267363469004419e-13,5.26736346898422e-13,5.267363469004419e-13,2516.593655648665,6232.248393683674,2498.368275393325,5371.293786504489,2128.872750916188,6228.3054185377905,2882.201627156555,6234.986062220659,2515.541676754149,7302.011497700013,5.26736346898422e-13,5.267363469004419e-13,5.26736346898422e-13,5.267363469004419e-13,5.26736346898422e-13,5.267363469004419e-13,5.26736346898422e-13,5.267363469004419e-13,5.26736346898422e-13,5.267363469004419e-13,2520.2815779941466,6236.690571571013,2515.6458872377384,5393.590061516483,2136.1547282431106,6238.527491430846,2880.474595853807,6232.771227817643,2498.3859100841214,7274.281080954764,5.26736346898422e-13,5.267363469024618e-13,5.26736346898422e-13,5.267363469024618e-13,5.26736346898422e-13,5.267363469024618e-13,5.26736346898422e-13,5.267363469024618e-13,5.26736346898422e-13,5.267363469024618e-13,2516.642839560074,6232.179214112719,2498.4446026273918,5371.4849676910835,2134.4547627326897,6236.292746650532,2878.568416458723,6230.535069576101,2515.8725928778977,7301.144189300506]
